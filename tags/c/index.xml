<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Standing on the Shoulder of Giants</title><link>https://www.jonathanlin.top/tags/c/</link><description>Recent content in C on Standing on the Shoulder of Giants</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © {year} Jonathan Lin. All rights reserved.</copyright><lastBuildDate>Wed, 08 Sep 2021 20:14:21 +0800</lastBuildDate><atom:link href="https://www.jonathanlin.top/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>C Primer Plus读书笔记（三）</title><link>https://www.jonathanlin.top/posts/c-primer-plus-notes-03/</link><pubDate>Wed, 08 Sep 2021 20:14:21 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-notes-03/</guid><description>
&lt;p>&lt;em>本文是《C Primer Plus》第九章至第十一章读书笔记，持续更新中。&lt;/em>&lt;/p>
&lt;h2 id="ch09-函数">ch09. 函数&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>函数原型、函数定义和函数调用&lt;/li>
&lt;li>函数的参数列表和返回值&lt;/li>
&lt;li>形参和实参&lt;/li>
&lt;li>函数类型&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>函数原型：任何程序在使用函数之前都要声明改函数的类型。&lt;strong>在函数调用前需要声明函数原型&lt;/strong>。函数原型是告诉编译器函数的类型。对于较小的函数，也可以把函数定义放在主调函数之前，这时候的函数定义也就是函数声明&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数定义：提供函数的实际代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>声明带有参数的函数时，可以只给定参数的类型而不需要提供参数的名字，比如：&lt;code>void show_n_char(char, int);&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数参数 - 主调函数通过参数将值传递给被调函数&lt;/p>
&lt;ul>
&lt;li>形式参数(formal argument) - 函数定义和声明中，参数列表里定义的参数&lt;/li>
&lt;li>实际参数(actual argument) - 具体的值，是主调函数赋值给形式参数的值，可以是常量、变量或者表达式。&lt;strong>在被调函数中使用的实际参数的值，是主调函数以拷贝的方式传递给被调函数，因此在被调函数中需值的修改不会影响原始数据&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>返回值 - 被调函数通过返回值将值传递给主调函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数类型，实际上是指函数的返回值类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>递归&lt;/p>
&lt;ul>
&lt;li>每一级递归函数里的变量都是私有的，即都属于对应层级的递归&lt;/li>
&lt;li>递归函数可能会快速消耗计算机内存，甚至耗尽。因此递归函数的层级受限于内存空间&lt;/li>
&lt;li>此外，递归本质是函数调用，由于递归引发的多次函数调用，对性能会有一定的影响&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>头文件 - 把函数原型和已定义的字符常量（#define)放在头文件中是一个良好的习惯，这样只需要在使用这些函数或者字符常量的地方通过#include引入头文件即可，避免了重复声明函数原型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针&lt;/p>
&lt;ul>
&lt;li>是一个值为内存地址的变量，也称为指针变量&lt;/li>
&lt;li>取地址操作：&lt;code>ptr = &amp;amp;pooh&lt;/code>，将&lt;code>pooh&lt;/code>地址赋给指针变量&lt;code>ptr&lt;/code>&lt;/li>
&lt;li>取值操作/间接运算法操作/解引用操作：&lt;code>val = *ptr&lt;/code>。实际上&lt;code>ptr = &amp;amp;pooh; val = *ptr;&lt;/code> 等价于&lt;code>val = pooh&lt;/code>&lt;/li>
&lt;li>声明指针：&lt;code>int * pi; char * pc; float pf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>函数参数的值传递和地址传递&lt;/p>
&lt;ul>
&lt;li>&lt;code>function(int num)&lt;/code> - 值传递，一般用于基于值进行计算&lt;/li>
&lt;li>&lt;code>function(int* num)&lt;/code> - 地址传递，一般用于在被调函数中修改主调函数的值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch10-数组和指针">ch10. 数组和指针&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>数组如何创建&lt;/li>
&lt;li>指针如何创建和使用&lt;/li>
&lt;li>数组和指针有何关系&lt;/li>
&lt;li>多维数组&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>数组：数据类型相同的一系列元素组成。声明数组必须告诉编译器数组的&lt;strong>元素个数&lt;/strong>和元素&lt;strong>数据类型&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组初始化：&lt;/p>
&lt;ul>
&lt;li>以逗号分割的值列表（花括号里）来初始化数组，如：&lt;code>int powers[3] = {1,2,3};&lt;/code>。注意，这种用花括号形式的赋值只能在初始化的时候，其他时候则不行&lt;/li>
&lt;li>经常使用符号常量来指定数组大小，如：&lt;code>int days[MONTHs] = {31,28,31};&lt;/code>&lt;/li>
&lt;li>&lt;code>const&lt;/code>数组和变量一样，都是表示只读类型，即初始化后只能读不能写&lt;/li>
&lt;li>使用数组前必须初始化，如果不初始化就读取，那么读取到的值不可靠&lt;/li>
&lt;li>如果只初始化部分数组元素，剩余的元素的值默认被设置为0&lt;/li>
&lt;li>创建数组时可以不指定数组大小，让编译器自动匹配数组大小，如：&lt;code>int days[] = {31,28,31};&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>指定初始化器&lt;/p>
&lt;ul>
&lt;li>使用指定初始化器，可以给特定下标的元素赋值，其他元素保持默认，如：&lt;code>int staff[] = {1,[6]=4,9,10};&lt;/code>，第0号元素为1，第6，7，8号元素分别是4，9和10，剩余元素默认为0&lt;/li>
&lt;li>如果多次初始化指定元素，后面的会覆盖前面的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>多维数组在计算机内部是按顺序存放数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二维数组初始化：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以看成是元素类型为一维数组的一维数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int sg[2][3] = {{5,6},{7,8}}&lt;/code> 定义了两行三列的二维数组，但是每行都只初始化了前两个元素，因此每行的第三个元素初始化为0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一种初始化方式是只用一对大括号，大括号里面的值依次按行付给数组元素。例如：&lt;code>int sg[2][3]={5,6,7,8}&lt;/code>，这样第一行的元素分别是5，6和7。而第二行是8和0&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>指针和数组&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数组名是该数组首元素的地址&lt;/strong>&lt;/li>
&lt;li>指针加1表示增加一个存储单元。这里的存储单元实际上对应指针所指向对象的数据类型对应的字节数&lt;/li>
&lt;li>数组加1后的地址是下一个元素的地址&lt;/li>
&lt;li>举例来说，定义一个数组&lt;code>ar&lt;/code>：
&lt;ul>
&lt;li>&lt;code>ar[n] = *(ar+n)&lt;/code>&lt;/li>
&lt;li>&lt;code>ar + n&lt;/code>的意义是：先定位到ar的位置，也就是首个元素的地址，然后移动n个存储单元&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>函数和数组&lt;/p>
&lt;ul>
&lt;li>处理数组的函数实际上是用指针作为参数&lt;/li>
&lt;li>在函数原型或者函数定义中，&lt;code>int *ar&lt;/code>和&lt;code>int[] ar&lt;/code>等价，也只有在函数原型或者定义中，这二者才能互换。&lt;strong>但是只有ar是指针变量的时候，才能使用&lt;code>ar++&lt;/code>这种操作，并且不支持&lt;code>++ar&lt;/code>&lt;/strong>&lt;/li>
&lt;li>函数原型中指定数组的两种方式：1）通过指针来指定数组首元素的地址 2）使用数组的定义&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在函数原型或者定义中指定数组元素个数的两种方式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在函数原型或者定义中指定数组的大小&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ar&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>在函数原型或者定义中指定数组的开始处和结束处&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">sump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sump(): %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>几点需要注意：&lt;/p>
&lt;ul>
&lt;li>&lt;code>end&lt;/code>实际上是指向数组最后一个元素的后面&lt;/li>
&lt;li>C保证在分配数组空间的时候，确保最后一个元素后面的第一个位置的指针仍然有效，&lt;strong>但是对存储在该位置上的值未做保证&lt;/strong>&lt;/li>
&lt;li>上面例子中，&lt;code>numbers + SIZE&lt;/code>就是指向最后一个元素的后面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>指针的几种操作&lt;/p>
&lt;ul>
&lt;li>赋值：&lt;code>ptr = &amp;amp;val&lt;/code>，把地址付给指针&lt;/li>
&lt;li>解引用：&lt;code>*&lt;/code>运算符给出指针指向的地址上存储的值。&lt;strong>注意：千万不要解引用未初始化的指针&lt;/strong>&lt;/li>
&lt;li>取值：&lt;code>ptr2 = &amp;amp;ptr1&lt;/code>，指针变量也有自己的地址和值&lt;/li>
&lt;li>指针与整数n相加：指针对应的地址+数组元素的数据类型的大小（字节为单位）*n， 实际上相当于数组的下标往后移动几个&lt;/li>
&lt;li>递增指针：实际相当于加1，数组下标往后移动一个&lt;/li>
&lt;li>指针减去一个整数：与整数相加相反，数组下标往前移动&lt;/li>
&lt;li>递减指针：数组下标往前移动一个&lt;/li>
&lt;li>指针求差：两个指针分别指向同一个数组的不同元素，通过计算求出两个元素之间的距离&lt;/li>
&lt;li>比较：两个指针都指向相同的类型才能比较&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在函数（参数）中传递数组&lt;/p>
&lt;ul>
&lt;li>数组时以指针的方式传递。如果数组也通过副本的方式传递，那么会占用大量的内容&lt;/li>
&lt;li>由于数组时通过指针传递，因此是可以在函数中直接修改参数的值&lt;/li>
&lt;li>为了避免在函数中修改参数的值，应该将数组声明为&lt;code>const&lt;/code>，例如：&lt;code>int sum(const int ar[], int n);&lt;/code>&lt;/li>
&lt;li>&lt;code>const&lt;/code>并不是要求原数组是常量，而是函数处理数组时将其视为常量。如果不小心在函数中修改了数组的值，编译器会报错&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>const的几种用法&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">定义&lt;/th>
&lt;th>指针是否可以修改指向别处&lt;/th>
&lt;th>指针指向的值是否可以修改&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>double rates[3] = {11.1, 22.2, 33.3}; const double * pd = rates;&lt;/code>&lt;/td>
&lt;td>是&lt;/td>
&lt;td>否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>double rates[3] = {11.1, 22.2, 33.3}; double * const pd = rates;&lt;/code>&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>double rates[3] = {11.1, 22.2, 33.3}; const double * const pd = rates;&lt;/code>&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>**const的修饰对象：**取决于和谁挨得近。如果和数据类型挨得近，那么是修饰对应的数据类型是const类型；如果和&lt;code>*&lt;/code>挨得近，则修饰指针，即指针本身的值不可以改变（不可以指向别处）&lt;/p>
&lt;p>此外还需要注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>把&lt;code>const&lt;/code>数据或者非&lt;code>const&lt;/code>数据的地址初始化为指向&lt;code>const&lt;/code>的指针是合法的。指向&lt;code>const&lt;/code>的指针意义在于无法通过该指针修改相应地址对应的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">rates1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">11.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">22.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">33.3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">44.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">55.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">66.6&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pd1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rates1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>只能把非&lt;code>const&lt;/code>数据的地址赋给普通指针。由于可以通过&lt;strong>普通指针&lt;/strong>修改指向的地址对应的值，因此如果将&lt;code>const&lt;/code>数据的地址赋给普通指针，那么&lt;code>const&lt;/code>数据将变的可以修改，这是&lt;strong>不合理&lt;/strong>的，这个将产生不可预期的结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">44.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">55.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">66.6&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pd3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 不应该这么做
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>二维数组 - &lt;code>int zippo[4][2] = {{ 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 }}&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>本质是数组元素为一维数组的一维数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zippo&lt;/code>：首元素地址，首元素为一维数组&lt;code>{2, 4}&lt;/code>，因此又是&lt;code>{2, 4}&lt;/code>的首地址，也就是元素2的地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zippo[n]&lt;/code>：第n个元素的地址，也就是第n+1行的起始地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对于二维数组，需要两次解引用才能取到某个具体的值&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>zippo&lt;/code>&lt;/td>
&lt;td>首元素地址，实际上是第一行元素的起始地址。&lt;code>*zippo&lt;/code>取到第一行元素，&lt;code>**zippo&lt;/code>取到第一行元素的第一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>zippo + 2&lt;/code>&lt;/td>
&lt;td>第3行元素的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*(zippo + 2)&lt;/code>&lt;/td>
&lt;td>第3行元素的首元素地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*(zippo + 2)+1&lt;/code>&lt;/td>
&lt;td>第3行元素的第2个元素的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*(*(zippo + 2)+1)&lt;/code>&lt;/td>
&lt;td>第3行元素的第2个元素的值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int (*px)[2]&lt;/code> - 指向一个二维数组，且这个二维数组有两列，即n * 2。**注意：**要和&lt;code>int *px[2]&lt;/code>区分开，因为&lt;code>[]&lt;/code>的优先级高于&lt;code>*&lt;/code>，因此&lt;code>px&lt;/code>先和&lt;code>[]&lt;/code>结合这样就声明为元素个数为2的一维数组，然后该一维数组的元素数据类型是&lt;code>int*&lt;/code>，也就是：含有两个int指针的一维数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数声明中的参数是二维数组时，下面两种方式的定义都是等价：&lt;/p>
&lt;ul>
&lt;li>&lt;code>void somefunction(int (*pt)[4])&lt;/code>&lt;/li>
&lt;li>&lt;code>void somefunction(int pt[][4])&lt;/code> - 对于这种形式，第一个方括号一定留空，这样代表是一个指针，且该指针指向元素为4个元素的数组。第二个方括号里一定有一个值，否则pt这个指针无从知道它所指向的对象大小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>定长数组和变长数组&lt;/p>
&lt;ul>
&lt;li>定长数组：数组的长度是固定的，声明的时候需要使用常量或者常量表达式来指定数组的大小&lt;/li>
&lt;li>变长数组：创建数组的时候，可以使用变量来指定数组的大小。创建之后，则无法再修改数组大小。比如可以定义一个出来任意行列的二维数组：
&lt;ul>
&lt;li>&lt;code>int sum2d(int rows, int cols, int ar[rows][colds]&lt;/code>) - &lt;strong>注意：&lt;/strong>&lt;code>rows&lt;/code>和&lt;code>cols&lt;/code>必须放在&lt;code>ar&lt;/code>的定义前面&lt;/li>
&lt;li>&lt;code>int sum2d(int,int,int ar[*][*])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>复合字面量&lt;/p>
&lt;ul>
&lt;li>字面量 - 5是int类型字面量，'c'是char类型的字面量，81.3是double类型的字面量...&lt;/li>
&lt;li>&lt;code>(int [])(50,20,90)&lt;/code>是一维数组字面量，二维数组类似，这些就是复合字面量&lt;/li>
&lt;li>复合字面量可以很方便的给函数传递数组参数而不必事先创建数组，实际上复合字面量就是匿名数组&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch11-字符串和字符串函数">ch11. 字符串和字符串函数&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>字符串的表示形式&lt;/li>
&lt;li>C库中的字符和字符串函数的使用&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;strong>几种定义字符串的方式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>字符串常量 - 用双引号括起来的内容称为字符串常量。编译器会在双引号的字符末尾自动加入&lt;code>\0&lt;/code>字符
&lt;ul>
&lt;li>字符串常量属于静态存储类别，即该字符串只被存储一次&lt;/li>
&lt;li>&lt;strong>双引号括起来的内容被视为指向该字符串的存储位置的指针&lt;/strong>。例如：&lt;code>*&amp;quot;space farers&amp;quot;&lt;/code>表示的是对&amp;quot;space farers&amp;quot;的存储位置的地址解引用，那么取到的值就是该字符串的首个字符&lt;code>s&lt;/code>&lt;/li>
&lt;li>如果字符串中带有引号，那么需要在引号前面添加反斜杠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>字符串数组和初始化
&lt;ul>
&lt;li>&lt;code>char name[10] = &amp;quot;Jonathan&amp;quot;&lt;/code> - 在字符个数少于定义的数组个数时，用&lt;code>'\0'&lt;/code>补足。注意，如果用单个字符赋值，例如&lt;code>char name[10] = {'J', 'o', 'n', 'a', 't', 'h','a','n','\0'}&lt;/code>，最后一个字符一定得是&lt;code>'\0'&lt;/code>，否则会被认定是字符数组而不是字符串&lt;/li>
&lt;li>&lt;code>char name[] = &amp;quot;Jonathan&amp;quot;&lt;/code> - 这种不给定数组长度，那么编译器自动根据给定的字符串计算长度，当然最后会加上&lt;code>'\0'&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数组和指针的区别 - 既然字符串可以使用字符数组来表示，而后数组实际上又是和指针相通，那么指针自然可以表示字符串
&lt;ul>
&lt;li>&lt;code>char * head = &amp;quot;I love you&amp;quot;&lt;/code> - 这里的head是指针变量，因此可以修改head使得它指向其他的字符串&lt;/li>
&lt;li>&lt;code>char heart[] = &amp;quot;I love you&amp;quot; &lt;/code> - 这里的heart是常量，因为数组变量的值就是数组首个元素的地址，这个值是固定。因此不可以对heart本身再赋值。比如：&lt;code>heart = head&lt;/code>这个是不成立的&lt;/li>
&lt;li>&lt;code>char * head = &amp;quot;I love you&amp;quot;;*(head + 5) = 'T'&lt;/code> - &lt;strong>这是不推荐的做法&lt;/strong>，不同的编译器可能会导致不同的行为。对于&lt;code>&amp;quot;I love you&amp;quot;&lt;/code>这个字符串而言是存放在静态存储区，这里通过head修改了对应的静态存储区的值，会导致引用该字符串的所有其他变量都发生变化。因此，&lt;strong>建议在把指针初始化为字符串常量的时候使用const修饰符&lt;/strong>，即：&lt;code>const char * head = &amp;quot;I love you&amp;quot;&lt;/code>&lt;/li>
&lt;li>对于&lt;code>char heart[] = &amp;quot;I love you&amp;quot;&lt;/code>而言，实际上&lt;code>heart&lt;/code>并不是指向&lt;code>&amp;quot;I love you&amp;quot;&lt;/code>的静态存储区，数组实际上是获得了&lt;code>&amp;quot;I love you&amp;quot;&lt;/code>的副本。&lt;strong>所以，如果打算修改字符串，应该用数组形式而不是用指针&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>几种字符串输入方式的比较 - 字符串输入首先是需要预留存储该字符串的控件，然后使用输入函数获取字符串
&lt;ul>
&lt;li>&lt;code>scanf(&amp;quot;%s&amp;quot;, aStr)&lt;/code> - 只能读取一个单词&lt;/li>
&lt;li>&lt;code>gets(astr) / puts(astr)&lt;/code> - 读取整行的输入直到遇到换行符，&lt;strong>然后丢弃换行符，接着在末尾添加一个空字符使其成为一个C字符串&lt;/strong>。&lt;strong>注意：&lt;/strong>&lt;code>gets&lt;/code>只有一个参数，即字符串的首地址，因此无法判断输入的字符串是否有足够的空间存储。如果超过了存储空间内，会出现不可预知的问题。&lt;code>puts&lt;/code>会在字符串末尾添加换行符&lt;/li>
&lt;li>&lt;code>fgets(astr,len,ioin)/fputs(astr, ioout)&lt;/code> - 通常和&lt;code>fputs&lt;/code>配合使用。有三个参数1) 字符串变量用于接收字符串 2) 字符串的长度（如果是n，最大那么读入n-1个字符，最后一个字符用&lt;code>\0&lt;/code>填充。在存储空间充足的情况下会把换行符也存储下来） 3) 指定要读入的文件，如果是键盘读入，则以&lt;code>stdin&lt;/code>作为输入。&lt;code>fputs&lt;/code>不会在字符串末尾添加换行符。&lt;strong>&lt;code>fgets&lt;/code>函数返回指向char的指针。如果读到文件末尾，则返回一个特殊的指针NULL&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>空字符和空指针
&lt;ul>
&lt;li>空字符：对应的编码是0，是整数类型&lt;/li>
&lt;li>空指针：是一个指针类型，指向一个无效的地址，它不会与任何数据的有效地址对应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>C Primer Plus 编程练习</title><link>https://www.jonathanlin.top/posts/c-primer-plus-handson/</link><pubDate>Fri, 23 Jul 2021 23:35:03 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-handson/</guid><description>
&lt;h2 id="ch06-c控制语句循环">ch06. C控制语句：循环&lt;/h2>
&lt;blockquote>
&lt;ol start="5">
&lt;li>
&lt;p>编写一个程序，提示用户输入大写字母。使用嵌套循环以下面金字塔型的格式打印字母：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span> &lt;span class="n">A&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">ABA&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">ABCBA&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">ABCDCBA&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">ABCDEDCBA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>提示：用外层循环处理行，每行使用3个内层循环，分别处理空格、以升序打印字母、以降序打印字母。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：外层循环处理行容易实现，但是使用3个内层循环控制空格、升序字母和降序空格字母似乎有点多。这里可以结合条件判断，是的内层只需要一个循环搞定空格、升降序字母的打印。这里有几点比较关键&lt;/p>
&lt;ul>
&lt;li>每行有多少个空格&lt;/li>
&lt;li>每个一共要打印的字符是多少个，是包括每行的空格加上字符&lt;/li>
&lt;li>每行都是对称的，要找到每行对称中心的字符&lt;/li>
&lt;li>每行的空格数、字符数和对称中心的字符都是不一样的，这个要内循环中处理好&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">middle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input a char (A - Z):&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">middle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">middle&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">middle&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">middle&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 总的行数
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定义变量保存内循环里的空格数以及自字符。字符数实际上是等差数列 - 1，3，5，7...
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">lines&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">spaces&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lines&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 计算每行的空格数
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 计算每行的字符数
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">asc_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每行升序部分的起始字符
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">middle_of_line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">middle&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每行的对称中心的字符
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">desc_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">middle_of_line&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每行的降序部分起始字符
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">spaces&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 打印空格
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">asc_start&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">middle_of_line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">asc_start&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 打印升序部分
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">desc_start&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 打印降序部分
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Your input is invalid!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">42&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">44&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">46&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="c1">// 结果输出
&lt;/span>&lt;span class="ln">48&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Please&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">G&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="n">A&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="n">ABA&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="n">ABCBA&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="n">ABCDCBA&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="n">ABCDEDCBA&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="n">ABCDEFEDCBA&lt;/span>
&lt;span class="ln">55&lt;/span>&lt;span class="n">ABCDEFGFEDCBA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="7">
&lt;li>编写一个程序把一个单词读入一个字符数组中，然后倒序打印这个单词。提示：&lt;code>strlen()&lt;/code>函数。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：&lt;/p>
&lt;ul>
&lt;li>&lt;code>strlen()&lt;/code>和&lt;code>sizeof&lt;/code>的区别是 - &lt;code>strlen&lt;/code>输出的字符串的长度，即一个字符串里字符的个数（不包括）末尾的占位符；&lt;code>sizeof&lt;/code>输出的是字符数组的长度&lt;/li>
&lt;li>&lt;code>scanf&lt;/code>读入字符串的时候，遇到空格就停止读入了，也就是读入的只是空格前字符&lt;/li>
&lt;li>实际上，字符串是通过字符数组存放。如果输入的字符串长度超过的数组长度，那么也不会报错且存放的数据也都是正确的，本章和前面的章节还没给出答案，后面专门的字符串章节应该会介绍&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;string.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input a word: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sizeof: %zd, string length: %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Magic - &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c1">// 结果输出
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Please&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="nl">word&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">congratulation&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="nl">length&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">Magic&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">noitalutargnoc&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="11">
&lt;li>编写一个程序，在数组中读入8个整数，然后按照倒序打印这个8个整数&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：这个考察的是通过循环从&lt;code>scanf&lt;/code>输入字符元素，输入的时候&lt;code>scanf&lt;/code>通过空格分隔。实际上&lt;code>scanf&lt;/code>遇到与期望的数据类型不一致的时候就停止输入，然后继续把不合格的类型的数据传递给下一次&lt;code>scanf&lt;/code>，这个要注意&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#define SIZE 8
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter 8 numbers(int): &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Numbers in reverse: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SIZE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1">// 结果输出
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Enter&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">Numbers&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="nl">reverse&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">%&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch07-c控制语句分支和跳转">ch07. C控制语句：分支和跳转&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>编写一个程序读取输入，读到#字符停止，然后报告读取的空格数、换行符数和所有其他字符的数量&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：&lt;/p>
&lt;ul>
&lt;li>可以使用&lt;code>getchar&lt;/code>或者&lt;code>scanf&lt;/code>来获取输入的字符&lt;/li>
&lt;li>可以使用&lt;code>switch...case...&lt;/code>或者&lt;code>if...else...&lt;/code>来判断字符&lt;/li>
&lt;li>&lt;code>ctype.h&lt;/code>中提供了一系列判断字符类型的函数，要加以利用。但是在&lt;code>switch...case..&lt;/code> 的&lt;code>case&lt;/code>语句中，不能使用函数判断字符类型，因为&lt;code>case&lt;/code>分支值必须是整型常量后者常量表达式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input # to end...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">returns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">returns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">others&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">spaces&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">returns&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">others&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;char counts:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">spaces : %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">returns: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">others: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">returns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="6">
&lt;li>编写程序读取输入，读到#停止，报告ei出现的次数&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：&lt;/p>
&lt;ol>
&lt;li>需要记录上一次和当前的字符，当上次字符是&lt;code>e&lt;/code>且当前字符是&lt;code>i&lt;/code>的时候，计数器加1&lt;/li>
&lt;li>需要使用逻辑与运算&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">repeat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input # to end...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">previous&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;e&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">repeat&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ei counts: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">repeat&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="7">
&lt;li>
&lt;p>编写一个程序，提示用户输入一周工作的小时数，然后打印工资总额、税金和净收入。做如下假设：&lt;/p>
&lt;p>a. 基本工资 = 10.00美元/小时&lt;/p>
&lt;p>b. 加班（超过40小时）= 1.5倍的时间&lt;/p>
&lt;p>c. 税率： 前300美元为15%&lt;/p>
&lt;p>​ 续150美元为20%&lt;/p>
&lt;p>​ 余下的为25%&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#define BASIC_SALARY 10.00
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">#define RATE_300 0.15
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cp">#define RATE_450 0.2
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="cp">#define RATE_OVER_450 0.25
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">working_hours&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input your working hours: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">working_hours&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bad input, please try again!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getchar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 过滤掉不符合要求的字符，否则不符合规则字符会一直传递给scanf导致死循环
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input your working hours: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">working_hours&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">working_hours&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">40&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">1.5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">working_hours&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">total_salary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">working_hours&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">BASIC_SALARY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">tax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">450&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">tax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">300&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_300&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">150&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_450&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">450&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_OVER_450&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">tax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">300&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_300&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_OVER_450&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">tax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">total_salary&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_300&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Total Salary: %4.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">Tax: %4.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">Net Salary: %4.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">total_salary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">total_salary&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tax&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch08-字符输入输出和输入验证">ch08. 字符输入/输出和输入验证&lt;/h2>
&lt;blockquote>
&lt;ol start="4">
&lt;li>编写一个程序，在遇到EOF之前，把输入作为字符流读取。该程序要报告每个单词的字母数，不要把空白和标点统计为单词的字母&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ctype.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">ch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ispunct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\t&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">putchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">chCount&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">chCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chCount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">chCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch09-函数">ch09. 函数&lt;/h2>
&lt;blockquote>
&lt;ol start="7">
&lt;li>编写一个函数，从标准输入中读取字符，直到遇到文件结尾。程序要报告每个字符是否是字母。如果是，还要报告该字母在字母表中的数值位置。例如，c和C在字母表中的位置都是3。合并一个函数，以一个字符作为参数，如果该字符是一个字母则返回一个数值位置，否则返回-1。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：善用&lt;code>ctype.h&lt;/code>提供的函数能很好的处理空格和大小写字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ctype.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">alphabetPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alphabetPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c is not in the alphabet.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The position of %c in the alphabet is: %d.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">alphabetPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">islower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isupper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="11">
&lt;li>编写并测试Fibonacci()函数，该函数用循环代替递归计算斐波那锲数。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fibonacci_loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Fibonacci(%u): %lu. recursion == loop? %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">before_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">before_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">before_1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">before_2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">before_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">before_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="n">before_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch10-数组和指针">ch10. 数组和指针&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>下面的代码中，&lt;code>*ptr&lt;/code>和&lt;code>*(ptr+2)&lt;/code>的值分别是什么？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">torf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>解答：&lt;code>ptr&lt;/code>指向的&lt;code>torf[0]&lt;/code>，也就是一维数组，指向的数据类型的大小是一个&lt;code>int&lt;/code>类型大小为4个字节的整数。初始化&lt;code>ptr&lt;/code>的时候，指向二维数组的第一个元素也就是12，因此解引用后ptr = 12；接着&lt;code>ptr+2&lt;/code>使得指针往前移动两个数据单位，也就是移动了8个字节，由于数组地址的连续性，然后这时候指针正好指向了16。&lt;/p>
&lt;blockquote>
&lt;ol start="2">
&lt;li>分别使用数组表示法、指针表示法和指针递增函数、指针表示法和指针起始和结束拷贝数组：
&lt;ul>
&lt;li>&lt;code>copy_arr(target1, source,5)&lt;/code>&lt;/li>
&lt;li>&lt;code>copy_ptr(target1, source,5)&lt;/code>&lt;/li>
&lt;li>&lt;code>copy_ptrs(target, source, source+5)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">srcstart&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">srcend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">srcstart&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">srcend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">srcstart&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%.2lf &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">46&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="n">copy_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="n">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="n">copy_ptrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">50&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">54&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">56&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="6">
&lt;li>编写一个函数，把double类型的数组的数据倒序排序&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="7">
&lt;li>编写一个程序，初始化一个double类型的二维数组，使用2中的拷贝程序把该二维数组拷贝到另一个二维数组里&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_arr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">printarr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">6.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">7.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">8.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">9.9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">10.0&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">11.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">12.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">13.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">14.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">15.5&lt;/span> &lt;span class="p">}};&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">copy_arr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">printarr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="9">
&lt;li>编写一个程序初始化一个double类型的3X5的二维数组，使用一个处理变长数组的函数将其拷贝至另一个二维数组中。还需要编写一个接受一个以变长数组为形参的函数打印这个二维数组&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：这个跟第7题类似，只不过将第7题中的函数修改成以变长数组作为形参。这里需要知道如何定义形参为变长数组的函数即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">cols&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">cols&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">arr2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">cols&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">6.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">7.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">8.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">9.9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">10.0&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">11.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">12.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">13.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">14.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">15.5&lt;/span> &lt;span class="p">}};&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">copy_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">print_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>C Primer Plus读书笔记（二）</title><link>https://www.jonathanlin.top/posts/c-primer-plus-notes-02/</link><pubDate>Mon, 19 Jul 2021 21:24:20 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-notes-02/</guid><description>
&lt;p>&lt;em>本文是《C Primer Plus》第六章至第八章读书笔记，持续更新中。&lt;/em>&lt;/p>
&lt;h2 id="ch06-c控制语句循环">ch06. C控制语句：循环&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>C语言支持哪些循环控制关键字&lt;/li>
&lt;li>循环体中（里）变量的作用域&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>可以通过&lt;code>scanf&lt;/code>函数控制循环 - 如果输入数据无法转换成指定类型的时候，&lt;code>scanf&lt;/code>函数返回0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>while&lt;/code>循环部分要点：&lt;strong>只有测试条件之后的单独语句（简单或者符合语句）才是循环部分&lt;/strong> （一般编程习惯好的都不会出现这种情况，但是也得了解如果出现这种情况到底是因为什么。现代高级的IDE都会有相应的提醒）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;n is %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这里的n++已经不是循环体的一部分了，这个程序会陷入死循环
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 这里的分号是一个完整的语句了，一个空语句，只有这个空语句是while的循环体，因此这个程序只会打印 - n is 4
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;n is %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>关系表达式 - 浮点数比较时尽量只使用&lt;code>&amp;gt;&lt;/code>和&lt;code>&amp;lt;&lt;/code>，因为浮点数的舍入误差会导致逻辑上应该相等的两个数不相等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>TIP - 在构建是否相等的关系表示式的时候，可以如果是比价是否和一个常量相等，这时候可以把常量放左边，这可以避免误把赋值操作当做了比较操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">canoes&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 语法错误，编译器不允许这么做
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">canose&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>C语言中，数值可以作为测试表达式（真值），但是C语言的真值的逻辑是：&lt;strong>所有非0都视为真，只有0被视为假&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is true. | &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is false.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is true. | &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is false.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">// Output:
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">// 3 is true. | 2 is true. | 1 is true. | 0 is false.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">// -3 is true. | -2 is true. | -1 is true. | 0 is false.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>C99之前，用&lt;code>int&lt;/code>表示真/假值。C99之后引入了&lt;code>_Bool&lt;/code>类型，该类型只能存储1（真）或0（假）。如果把非0的数值赋值给&lt;code>_Bool&lt;/code>类型变量，改变量自动被设置成1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**关系运算符优先级：**关系运算符的优先级比算术运算符（包括+和-）&lt;strong>低&lt;/strong>，&lt;strong>比赋值运算符高&lt;/strong> (优先级：&lt;a href="https://www.jonathanlin.top/posts/c-primer-plus-notes-01/#ch05%E8%BF%90%E7%AE%97%E7%AC%A6%E8%A1%A8%E8%BE%BE%E7%AC%A6%E5%92%8C%E8%AF%AD%E5%8F%A5">C Primer Plus读书笔记（一） | Standing on the Shoulder of Giants (jonathanlin.top)&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch07-c控制语句分支和跳转">ch07. C控制语句：分支和跳转&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>支持分支、跳转的关键字有哪些&lt;/li>
&lt;li>字符I/O函数&lt;code>getchar&lt;/code>和&lt;code>putchar&lt;/code>有什么特别之处&lt;/li>
&lt;li>&lt;code>goto&lt;/code>语句是否应该使用，应该注意哪些事项&lt;/li>
&lt;li>&lt;code>if...else&lt;/code>的配对问题&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ch = getchar()&lt;/code> - 与&lt;code>scanf(&amp;quot;%c&amp;quot;, &amp;amp;ch)&lt;/code>类似，读取下一个字符赋值给变量&lt;code>ch&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>getchar&lt;/code> - 读取每个字符，包括空格、制表符和换行符&lt;/li>
&lt;li>&lt;code>scanf&lt;/code> - 读取数字时会跳过空格、制表符和换行符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>putchar(ch)&lt;/code> - 与&lt;code>printf(&amp;quot;%c&amp;quot;, ch)&lt;/code>类似，打印一个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctype.h&lt;/code>系列字符函数 - 接受一个字符作为输入，如果该字符属于某个特殊的类型，则返回一个非零值（&lt;code>True&lt;/code>），否则返回零值（&lt;code>False&lt;/code>)。这些函数可以判断是否为字母、数字、空白字符等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>C编译器是忽略缩进的&lt;/strong>&lt;/em>，当出现多个&lt;code>if...else&lt;/code>的时候，一定要注意它们之间的配对。配对的原则是：&lt;em>&lt;strong>如果没有花括号，&lt;code>else&lt;/code>和离它最近的&lt;code>if&lt;/code>配对&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>逻辑表达式（有逻辑运算符&lt;code>&amp;amp;&amp;amp; || !&lt;/code>参与的表达式）的求值顺序是从左往右，&lt;em>一旦发现有使整个表达式为假的因素&lt;/em>，立即停止求值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>范围测试，例如判断&lt;code>score&lt;/code>是否在90和100之间&lt;/p>
&lt;ul>
&lt;li>&lt;code>score &amp;gt;= 90 &amp;amp;&amp;amp; score&amp;lt;=100&lt;/code> ✔️&lt;/li>
&lt;li>&lt;code>90 &amp;lt;= score &amp;lt;= 100&lt;/code> ❌ 由于&lt;code>&amp;lt;=&lt;/code>的求值顺序是从左到右，因此这里会先计算&lt;code>90 &amp;lt;= score&lt;/code>，而整个关系表达值的值要么是0（False）要么是1（True），都是小于100，因此整个表达式的结果是&lt;code>True&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>条件运算符&lt;code>?:&lt;/code> - &lt;code>expression1 ? expression2: expression3&lt;/code>&lt;/p>
&lt;ul>
&lt;li>如果&lt;code>expression1&lt;/code>的值为&lt;code>True&lt;/code>，那么整个表达式的值为&lt;code>expression2&lt;/code>&lt;/li>
&lt;li>如果&lt;code>expression1&lt;/code>的值为&lt;code>False&lt;/code>，那么整个表达式的值为&lt;code>expression3&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>switch...case...&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>switch&lt;/code>括号表达式中的值应该是一个整数值（包括&lt;code>char&lt;/code>）&lt;/li>
&lt;li>&lt;code>case&lt;/code>标签必须是整数类型（包括&lt;code>char&lt;/code>)的常量或者整数型常量表达式&lt;/li>
&lt;li>不能用变量作为&lt;code>case&lt;/code>标签&lt;/li>
&lt;li>如果没有添加&lt;code>break&lt;/code>，那么匹配到某个标签以及之后所有的&lt;code>case&lt;/code>都会匹配上&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">整型表达式&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="err">常量&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="err">语句&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="err">常量&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="err">语句&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="err">语句&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>尽量避免或者不使用&lt;code>goto&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="k">goto&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">...&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nl">label&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">statement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch08-字符输入输出和输入验证">ch08. 字符输入/输出和输入验证&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>输入和输出跟缓冲区有什么关系？&lt;/li>
&lt;li>有缓冲和无缓冲有什么区别？&lt;/li>
&lt;li>是否可以手动刷新输入输出缓冲区？&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>无缓冲区：当用户输入字符后立即重复打印该字符，这是无缓冲区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有缓冲区：用户输入的字符被收集保存在一个被称为&lt;code>缓冲区(buffer)&lt;/code>的临时存储区，按下Enter后打印，这是有缓冲区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓冲类型：&lt;/p>
&lt;ul>
&lt;li>完全缓冲I/O：当缓冲区满的时候才刷新缓冲区&lt;/li>
&lt;li>行缓冲I/O：出现换行符时刷新缓冲区&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>文件和流&lt;/p>
&lt;ul>
&lt;li>文件：&lt;strong>存储器中存储信息的区域，不同的操作系统存储信息方式不同，因此文件的底层表示形式也不一样。有的分块有的不分块，有的块大有的块小&lt;/strong>&lt;/li>
&lt;li>流：C程序处理的是流，而不是文件。流或者说数据流是对输入输出的映射，换句话说，输入转换成数据流，数据流映射到文件，输出也是类似，文件映射成数据流。这样上层就忽略了底层因为操作系统不同带来的差异&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>文件结尾EOF&lt;/p>
&lt;ul>
&lt;li>可以用处理文件的方式来处理键盘输入（原因是C语言处理的都是流）&lt;/li>
&lt;li>以往判断文件结尾的一种方式是，&lt;strong>在文件末尾放一个特殊字符ctrl+z标记文件结尾&lt;/strong>&lt;/li>
&lt;li>无论操作系统实际使用何种方法检测文件结尾，C语言中检测到文件末尾的时候，会返回一个&lt;strong>特殊的值EOF&lt;/strong>（&lt;strong>注意，EOF是一个值，并不是一个字符&lt;/strong>）&lt;/li>
&lt;li>EOF的值不在&lt;code>char&lt;/code>的值表示的范围内&lt;/li>
&lt;li>在终端中，UNIX风格的操作系统通过&lt;code>ctrl+d&lt;/code>模拟EOF&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>stdin和stdout&lt;/p>
&lt;ul>
&lt;li>C语言上层处理的是&lt;strong>数据流&lt;/strong>，至于数据流的源头和目的地是哪，实际上对上层语言是透明的&lt;/li>
&lt;li>stdin - 程序从stdin获取到的数据流，数据的来源可能是键盘输入，也可能是来自文件，程序本身不知道源头，只知道处理的是数据流。stdin默认来源是键盘输入，可以通过重定向使得数据来源于文件&lt;/li>
&lt;li>stdout - 程序将数据流发送给stdout，数据流的去处对程序是透明的。数据流经由stdout，可能输出到显示设备，也可能保存到文件。默认是输出到显示设备&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code>和&lt;code>&amp;gt;&lt;/code>是重定向符号&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>C Primer Plus读书笔记（一）</title><link>https://www.jonathanlin.top/posts/c-primer-plus-notes-01/</link><pubDate>Mon, 05 Jul 2021 19:41:09 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-notes-01/</guid><description>
&lt;p>&lt;em>本文是《C Primer Plus》第三章至第五章读书笔记。&lt;/em>&lt;/p>
&lt;h2 id="ch03-数据和c">ch03. 数据和C&lt;/h2>
&lt;blockquote>
&lt;p>思考问题：&lt;/p>
&lt;ol>
&lt;li>各种类型的数据占用多少空间&lt;/li>
&lt;li>各种类型的数据是如何格式化输出的&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>一般而言，存储int需要占用一个机器字长&lt;/li>
&lt;li>C语言中的byte不是8个bit，而是和一个char占用的位长一样&lt;/li>
&lt;li>char根据编译器不同，可能被处理成有符号也可能被处理成无符号。具体可以查看头文件limits.h&lt;/li>
&lt;li>整数类型一般都被存储为int类型，当超过int最大范围，编译器会自动将其视为高一个等级的类型，直到越界&lt;/li>
&lt;li>2^16 = 65536 / 2^8 = 256&lt;/li>
&lt;li>浮点数的存储：有效数和指数部分（包括符号），3.16e^7，有效数部分就是3.16&lt;/li>
&lt;li>float至少能表示6位有效数字，double至少能表示10位有效数字&lt;/li>
&lt;li>表达式中，float会自动转化成double&lt;/li>
&lt;li>浮点数和整型数在计算机内部，虽然都是二进制表示，但是二进制的表示形式不一样，浮点数是把有效数字和指数部分分别表示。因此，在处理浮点数和整型的时候，计算机会做自动的转换，这个很危险&lt;/li>
&lt;/ul>
&lt;h2 id="ch04-字符串和格式化输入输出">ch04. 字符串和格式化输入/输出&lt;/h2>
&lt;blockquote>
&lt;p>思考问题：&lt;/p>
&lt;ol>
&lt;li>字符串是如何存取的&lt;/li>
&lt;li>字符串底层的数据结构是怎样的&lt;/li>
&lt;li>输入输出函数如何格式化&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>C语言中，没有专门的数据结构存放字符串。字符串是存放在char数组中，且数组的末尾是存放占位符'\0'，这个占位符是自动添加到数组末尾&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用scanf读取字符串的时候，&lt;strong>输入空格则停止读取&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用scanf读取字符串的时候，变量不需要通过&amp;amp;取地址（因为字符数组本身就是一个指针）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;quot;x&amp;quot;和'x'的区别：前者是char数组，实际占用两个字符，后者是char类型，一个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sizeof - 字节长度 / strlen - 字符串长度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用sizeof计算字符串，会把结束字符（空字符'\0'）也算进去得到总共占用的字节数；而strlen计算字符串长度的时候，不会把末尾的结束字符计算进去&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sizeof结果返回size_t类型，一个无符号整型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>limits.h和float.h中分别定义了各种类型的最大值和最小值，这个会由于操作系统以及其字长的不同而不同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>#define NAME value - 使用预处理器定义了一个明示常量，通常用大写来命名；const定义的实际是变量，可读变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>printf&lt;em>&lt;strong>转换说明：把以二进制格式存储在计算机中的值转换成一系列字符串然后打印&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>转换如果和底层的数据类型不匹配会发生很奇怪的事情，如下代码：&lt;/p>
&lt;ol>
&lt;li>n1是float类型，但是在存储的时候会自动转换成double，因此占用8个字节，但是&lt;code>%ld&lt;/code>导致在转换说明的时候，只读取了前4个字节&lt;/li>
&lt;li>以上，导致每一次&lt;code>%ld&lt;/code>的转换都发生错位，四次的&lt;code>%ld&lt;/code>仅读取了16个字节，但是&lt;code>n1&lt;/code>到&lt;code>n4&lt;/code>一共占用了24个字节&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%ld %ld %ld %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jonlimx/blogs/image/printf-incompatiable.png" alt="转换不匹配">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>格式化字符串转换说明 （关于转换说明符修饰符P71）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>转换说明&lt;/th>
&lt;th>输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>%a %A&lt;/td>
&lt;td>浮点数、十六进制数和p记数法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%c&lt;/td>
&lt;td>单个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%d&lt;/td>
&lt;td>有符号十进制整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%e %E&lt;/td>
&lt;td>浮点数，e&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%f&lt;/td>
&lt;td>浮点数，十进制记数法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%g %G&lt;/td>
&lt;td>根据值的不同，自动选择%f或%e。%e格式用于指数小于-4或者大于或等于精度时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%i&lt;/td>
&lt;td>有符号十进制整数（与%d相同）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%o&lt;/td>
&lt;td>无符号八进制整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%p&lt;/td>
&lt;td>指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%s&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%u&lt;/td>
&lt;td>无符号十进制整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%x&lt;/td>
&lt;td>无符号十六进制整数，使用十六进制数0f&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%X&lt;/td>
&lt;td>无符号十六进制整数，使用十六进制数0F&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%%&lt;/td>
&lt;td>打印一个百分号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%zd&lt;/td>
&lt;td>打印size_t类型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>scanf与printf正好相反，从键盘输入的都是字符串，scanf通过制定数据类型然后将字符串转换成对应的数据类型。注意：&lt;strong>除了字符串类型及char数组，其他所有的类型都要通过指针来接收值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>scanf通过空格或者回车将输入分割成多个字段（%c是例外，也会把空字符作为输入存储）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>scanf的返回值是成功读取的项数（个数）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>*修饰符&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于printf而言，*修饰符用于代替字段。如下面代码所示，*修饰符用与替换width和precision表示宽度和精度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于scanf而言，把*放在%和转换字符之间，则会跳过相应的输入项。下面代码所示，scanf跳过了第一个和第二个输入，把第三个输入赋值给n&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">242.5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*.*f&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">precision&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*d %*d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch05-运算符表达符和语句">ch05. 运算符、表达符和语句&lt;/h2>
&lt;blockquote>
&lt;p>思考问题：&lt;/p>
&lt;ol>
&lt;li>C语言中有哪些运算符和表达符，运算符的优先级是怎么样的&lt;/li>
&lt;li>C语言中有哪些特殊的语句&lt;/li>
&lt;li>自动类型转换和强制类型转换&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>赋值表达式的目的是把值存储到内存位置上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浮点数除法的结果是浮点数，整数除法的结果是整数（小数部分直接被截断，不会四舍五入 ），整数和浮点数的除法是浮点数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运算符优先级&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>结合律 - 运算符符合与运算对象结合&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>（）&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ - （一元）++ -- sizeof ！&lt;/td>
&lt;td>从右到左&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>* / %&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ - （二元）&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>== !=&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>=&lt;/td>
&lt;td>从右到左&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上表结合律只适用于共享同一运算对象的运算符&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>6*3 + 4*5 - 可以肯定*优先级比+高，但是这例子中，6*3和4*5的运算先后顺序不确定，不同硬件平台可能顺序不一样（&lt;em>发生指令重排？？&lt;/em>）&lt;/li>
&lt;li>12/3*2 - 这个例子中，/和*的优先级一样，但是3是共享运算对象，因此遵循结合律从左到右，所以先算12/3，然后4*2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>求模运算只能用于整数，不能用于浮点数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>a%b &amp;lt;=&amp;gt; a - (a/b)*b&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自增和自减运算符 ++/--&lt;/p>
&lt;ul>
&lt;li>前缀模式：&lt;strong>先完成自增或者自减&lt;/strong>，然后再用结果参与同一语句中的其他运算&lt;/li>
&lt;li>后缀模式：先完成同一语句的其他预算，&lt;strong>然后再完成自增或者自减&lt;/strong>&lt;/li>
&lt;li>如果只是单独使用，也就是不和其他运算对象以及运算符一起的时候，前缀和后缀模式都没有区别，就是要完成自增或者自减&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>下面两种情况不要使用自增后者自减（由于可能指令重排导致计算没有按预期的顺序进行）&lt;/p>
&lt;ul>
&lt;li>一个变量出现在一个函数的多个参数中，那么不要对该变量使用自增或者自减&lt;/li>
&lt;li>一个变量多次出现表达式中，那么不要对该变量使用自增或者自减 - ans = num/2 + 5*(1+num++)，&lt;em>这里可能因为指令重排导致num++先算，那么前面的num/2就和预期不一样了&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>序列点：程序执行的点，在一个语句中，赋值运算符、自增自减运算符对运算对象做的改变必须在程序执行下一条语句之前完成&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动类型转换（&lt;strong>通常应该要避免&lt;/strong>）：&lt;/p>
&lt;ul>
&lt;li>升级：较小类型转换成较大类型&lt;/li>
&lt;li>降级：较大类型转换成较小类型 - &lt;strong>这种情况可能会发生数据截断&lt;/strong>&lt;/li>
&lt;li>升级发生在表达式中运算对象数据类型不同，这时候发生自动自动类型转换。运算结束后，会根据目标类型可能会发生降级，这时候可能就会发生数据截断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>强制类型转换：(type)variable&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实参和形参&lt;/p>
&lt;ul>
&lt;li>实参 argument - 调用函数时传递给形参的实际的值&lt;/li>
&lt;li>形参 parameter - 函数签名上定义的变量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>引用书中关于自动类型转换的一段：&lt;/p>
&lt;p>在C语言中，许多类型转换都是自动进行的。当&lt;code>char&lt;/code>和&lt;code>short&lt;/code>类型出现在表达式里或者作为函数的参数（函数原型除外）时，都会被升级为&lt;code>int&lt;/code>类型；当&lt;code>float&lt;/code>类型在函数参数中时，会被升级为&lt;code>double&lt;/code>类型&lt;/p>
&lt;p>当把一种值赋给另一种类型的变量时，值将被转换成与变量的类型相同&lt;/p>
&lt;p>当把较大类型转换成较小类型时，可能会丢失数据&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>函数声明 - 在调用函数的时候，编译器首先需要知道函数的返回类型，所以需要先声明函数，至于函数的实现可以放在后面&lt;/li>
&lt;/ul></description></item></channel></rss>