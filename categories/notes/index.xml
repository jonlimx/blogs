<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Standing on the Shoulder of Giants</title><link>https://www.jonathanlin.top/categories/notes/</link><description>Recent content in Notes on Standing on the Shoulder of Giants</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © {year} Jonathan Lin. All rights reserved.</copyright><lastBuildDate>Tue, 23 Nov 2021 09:50:25 +0800</lastBuildDate><atom:link href="https://www.jonathanlin.top/categories/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>MongoDB学习笔记（四）- 聚合框架</title><link>https://www.jonathanlin.top/posts/mongo-notes-04/</link><pubDate>Tue, 23 Nov 2021 09:50:25 +0800</pubDate><guid>https://www.jonathanlin.top/posts/mongo-notes-04/</guid><description>
&lt;p>Mongo Aggregation Framework聚合框架是一个计算框架，由管道（pipeline）和步骤（stage）组成，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jonlimx/blogs@main/image/image-20211123100530719.png" alt="Pipeline/Stage">&lt;/p>
&lt;ol>
&lt;li>原始的文档作为原始的输入数据&lt;/li>
&lt;li>每个步骤对输入数据进行处理，处理的结果作为下一个处理步骤的输入&lt;/li>
&lt;li>最终的结果也就是管道处理的结果，是由多个步骤处理完成&lt;/li>
&lt;/ol>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>聚合框架命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">pipeline&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">$stage1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$stage2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">$stageN&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">COLLECTION&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">aggregate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pipeline&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>支持的步骤列表详见：&lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/">Aggregation Pipeline Stages — MongoDB Manual&lt;/a>。常见的的步骤如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Stage&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>~ SQL&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$match&lt;/code>&lt;/td>
&lt;td>过滤&lt;/td>
&lt;td>WHERE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$project&lt;/code>&lt;/td>
&lt;td>投影&lt;/td>
&lt;td>AS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$sort&lt;/code>&lt;/td>
&lt;td>排序&lt;/td>
&lt;td>ORDER BY&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$group&lt;/code>&lt;/td>
&lt;td>分组&lt;/td>
&lt;td>GROUP BY&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$skip/$limit&lt;/code>&lt;/td>
&lt;td>结果限制&lt;/td>
&lt;td>SKIP / LIMIT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$lookup&lt;/code>&lt;/td>
&lt;td>左外连接&lt;/td>
&lt;td>LEFT OUTER JOIN&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$unwind&lt;/code>&lt;/td>
&lt;td>展开数组&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$graphLookup&lt;/code>&lt;/td>
&lt;td>图搜索&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$facet / $bucket&lt;/code>&lt;/td>
&lt;td>分面搜索&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>MongoDB学习笔记（三）- 文档删除、更新</title><link>https://www.jonathanlin.top/posts/mongo-notes-03/</link><pubDate>Wed, 17 Nov 2021 10:05:06 +0800</pubDate><guid>https://www.jonathanlin.top/posts/mongo-notes-03/</guid><description>
&lt;h2 id="删除文档">删除文档&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>删除单个文档：&lt;strong>&lt;code>db.collection.deleteOne()&lt;/code>&lt;/strong>&lt;/p>
&lt;p>删除多个文档：&lt;strong>&lt;code>db.collection.deleteMany()&lt;/code>&lt;/strong>&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>db.collection.deleteOne&lt;span class="o">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &amp;lt;filter&amp;gt;,
&lt;span class="ln"> 3&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> writeConcern: &amp;lt;document&amp;gt;,
&lt;span class="ln"> 5&lt;/span> collation: &amp;lt;document&amp;gt;,
&lt;span class="ln"> 6&lt;/span> hint: &amp;lt;document&lt;span class="p">|&lt;/span>string&amp;gt; // Available starting in MongoDB 4.4
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>db.collection.deleteMany&lt;span class="o">(&lt;/span>
&lt;span class="ln">11&lt;/span> &amp;lt;filter&amp;gt;,
&lt;span class="ln">12&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> writeConcern: &amp;lt;document&amp;gt;,
&lt;span class="ln">14&lt;/span> collation: &amp;lt;document&amp;gt;
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>filter&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>匹配条件。如果匹配条件给定&lt;code>{}&lt;/code>，那么删除集合中的第一个文档&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>writeConcern&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>可选。用于指定mongod对写操作的响应&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>collation&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>可选。用于指定字符串匹配规则&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>hint&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>针对单个文档删除的选项。可选。指定按条件匹配时使用的索引。如果指定了一个不存在的索引则会报错&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>返回值：&lt;/p>
&lt;p>包含下列元素的文档：&lt;/p>
&lt;ul>
&lt;li>&lt;code>acknowledged&lt;/code> - 如果指定了&lt;code>writeConcern&lt;/code>，值为 &lt;code>true&lt;/code> ；如果&lt;code>writeConcern&lt;/code>是disable的，值为&lt;code>false&lt;/code>&lt;/li>
&lt;li>&lt;code>deletedCount&lt;/code> - 删除的文档的个数&lt;/li>
&lt;/ul>
&lt;h3 id="行为">行为&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>db.collection.deleteOne()&lt;/code>删除符合匹配条件的第一个文档&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法从大小固定的集合（capped collection）上删除文档&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法从时序集合（time series collections）中删除文档&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当&lt;code>db.collection.deleteOne()&lt;/code>作用在分片集合上时，匹配条件里必须要包含分片键值或者&lt;code>_id&lt;/code>字段&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果只是删除单个文档，应该使用&lt;code>deleteOne&lt;/code>，而不是使用&lt;code>deleteMany&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指定&lt;code>collation&lt;/code>的时候必须指定&lt;code>locale&lt;/code>。如果未指定&lt;code>collation&lt;/code>，则使用集合默认的&lt;code>collation&lt;/code>。&lt;code>collation&lt;/code>的格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln"> 1&lt;/span>collation: &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> locale: &amp;lt;string&amp;gt;,
&lt;span class="ln"> 3&lt;/span> caseLevel: &amp;lt;boolean&amp;gt;,
&lt;span class="ln"> 4&lt;/span> caseFirst: &amp;lt;string&amp;gt;,
&lt;span class="ln"> 5&lt;/span> strength: &amp;lt;int&amp;gt;,
&lt;span class="ln"> 6&lt;/span> numericOrdering: &amp;lt;boolean&amp;gt;,
&lt;span class="ln"> 7&lt;/span> alternate: &amp;lt;string&amp;gt;,
&lt;span class="ln"> 8&lt;/span> maxVariable: &amp;lt;string&amp;gt;,
&lt;span class="ln"> 9&lt;/span> backwards: &amp;lt;boolean&amp;gt;
&lt;span class="ln">10&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="示例">示例&lt;/h3>
&lt;p>给定下面的集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;café&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cafe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cafE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>单个删除时指定&lt;code>collation&lt;/code>&lt;/strong>&lt;/p>
&lt;p>下面的语句将删除&lt;code>_id&lt;/code>为1的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">myColl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deleteOne&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cafe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">collation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">locale&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;fr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">strength&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>多个删除时指定&lt;code>collation&lt;/code>&lt;/strong>&lt;/p>
&lt;p>下面的语句将删除所有的文档。如果&lt;code>collation&lt;/code>中通过&lt;code>caseLevel&lt;/code>指明大小写敏感，这同上就删除第一个文档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">myColl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deleteMany&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cafe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">collation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">locale&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;fr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">strength&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新文档">更新文档&lt;/h2>
&lt;h3 id="定义-1">定义&lt;/h3>
&lt;p>更新单个文档： &lt;strong>&lt;code>db.collection.updateOne(filter, update, options)&lt;/code>&lt;/strong>&lt;/p>
&lt;p>更新多个文档：&lt;code>db.collection.updateMany(filter, update, options)&lt;/code>&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln"> 1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateOne&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nx">upsert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kr">boolean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nx">writeConcern&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nx">collation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nx">arrayFilters&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">filterdocument1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nx">hint&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="c1">// Available starting in MongoDB 4.2.1
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateMany&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="nx">upsert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kr">boolean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="nx">writeConcern&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nx">collation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nx">arrayFilters&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">filterdocument1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="nx">hint&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="c1">// Available starting in MongoDB 4.2.1
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>filter&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>匹配条件。如果匹配条件给定&lt;code>{}&lt;/code>，那么更新集合中的第一个文档&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>update&lt;/code>&lt;/td>
&lt;td>文档或者聚合管道&lt;/td>
&lt;td>可以是带有&lt;a href="#%E6%93%8D%E4%BD%9C%E8%A1%A8%E8%BE%BE%E5%BC%8F">更新操作表达式&lt;/a>的文档，或者是聚合管道&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>upsert&lt;/code>&lt;/td>
&lt;td>布尔值&lt;/td>
&lt;td>可选。默认为false，即在没有匹配到文档的时候不会以新的文档插入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>writeConcern&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>可选。用于指定mongod对写操作的响应&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>collation&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>可选。用于指定字符串匹配规则，和上面提到的删除的操作类似，也是用于扩展匹配规则&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>arrayFilters&lt;/code>&lt;/td>
&lt;td>数组&lt;/td>
&lt;td>可选。用于匹配要更新的文档下的数组元素，即对数组元素的条件限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>hint&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>针对单个文档删除的选项。可选。指定按条件匹配时使用的索引。如果指定了一个不存在的索引则会报错&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>返回值：&lt;/p>
&lt;p>包含下列元素的文档：&lt;/p>
&lt;ul>
&lt;li>&lt;code>matchedCount&lt;/code> - 匹配到的文档数&lt;/li>
&lt;li>&lt;code>modifiedCount&lt;/code> - 更新的文档数&lt;/li>
&lt;li>&lt;code>upsertedId&lt;/code> - 新插入的文档的&lt;code>_id&lt;/code>&lt;/li>
&lt;li>&lt;code>acknowledgeed&lt;/code> - 如果指定了&lt;code>writeConcern&lt;/code>，值为 &lt;code>true&lt;/code> ；如果&lt;code>writeConcern&lt;/code>是disable的，值为&lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="操作表达式">操作表达式&lt;/h3>
&lt;p>更新操作表达式由&lt;a href="https://docs.mongodb.com/manual/reference/operator/update/">操作符&lt;/a>和操作对象组成，具体格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">operator1&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">field1&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">value1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">operator2&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">field2&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">value2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">...&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：更新操作符在处理操作对象的时候，不同的版本顺序不一样&lt;/p>
&lt;ul>
&lt;li>MongoDB 5.0以及之后，操作符在处理文档字段的时候，如果是字符串则按照字典顺序，如果是数字类型则按照数字顺序&lt;/li>
&lt;li>MongoDB 4.4以及之前，操作符都是按照字典顺序来处理&lt;/li>
&lt;/ul>
&lt;p>例如，对于下面的操作表达式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">$set&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;a.2&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;a.10&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>MongoDB 5.0以及之后，先处理&lt;code>a.2&lt;/code>再处理&lt;code>a.10&lt;/code>&lt;/li>
&lt;li>MongoDB 4.4以及之前，先处理&lt;code>a.10&lt;/code>再处理&lt;code>a.2&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="字段操作符">字段操作符&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作符名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$currentDate&lt;/code>&lt;/td>
&lt;td>将字段的值设置为当前日期时间或者时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$inc&lt;/code>&lt;/td>
&lt;td>字段的值加上或者减去给定的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$min&lt;/code>&lt;/td>
&lt;td>对字段复制，值为给定的值和当前值较小的那个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$max&lt;/code>&lt;/td>
&lt;td>对字段复制，值为给定的值和当前值较大的那个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$mul&lt;/code>&lt;/td>
&lt;td>字段的值乘以给定的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$rename&lt;/code>&lt;/td>
&lt;td>对字段名称重命名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$set&lt;/code>&lt;/td>
&lt;td>对字段赋值。这里是可以替换整个文档，也可以设置文档下某个字段的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$setOnInsert&lt;/code>&lt;/td>
&lt;td>如果更新的时候匹配不到现有文档而发生插入操作的时候，给对应的字段赋值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$unset&lt;/code>&lt;/td>
&lt;td>从文档中删除字段&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="数组操作符">数组操作符&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作符名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$&lt;/code>&lt;/td>
&lt;td>占位符。表示符合匹配条件的第一个数组。元素类型可能是基本类型，也可能是文档&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$[]&lt;/code>&lt;/td>
&lt;td>占位符。表示符合匹配条件的所有数组。&lt;strong>即先根据条件匹配到符合条件的文档，然后对文档下面的数组所有元素进行更新&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$[&amp;lt;identifier&amp;gt;]&lt;/code>&lt;/td>
&lt;td>占位符，这个需要和&lt;code>arrayFilters&lt;/code>一起使用，用于更新符合特定条件的数组元素。这里的&lt;code>identifier&lt;/code>类似于变量，引用数组元素。例如：&lt;code>{$set: {&amp;quot;grades.$[elem]&amp;quot;: 100}}, {arrayFilters: [{&amp;quot;elem&amp;quot;: {$gt: 80}}]}&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$addToSet&lt;/code>&lt;/td>
&lt;td>将元素添加到数组里。如果文档字段本身不是数组类型则会失败。另外数组里如果已经存在相同的元素则不再往里添加&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$pop&lt;/code>&lt;/td>
&lt;td>删除数组里的第一个或者最后一个元素。`{ $pop: { &lt;field>: &amp;lt;-1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$pull&lt;/code>&lt;/td>
&lt;td>将符合条件的元素从数组里删除，注意删除的时候是根据&lt;code>$pull&lt;/code>后面带的条件删除。如果作用于非数组字段那么将会出错。`{ $pull: { &lt;field1>: &amp;lt;value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$push&lt;/code>&lt;/td>
&lt;td>与&lt;code>addToSet&lt;/code>类似，但是&lt;code>$push&lt;/code>也会把重复元素插入到数组，默认是插入到数组末尾&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$pusllAll&lt;/code>&lt;/td>
&lt;td>与&lt;code>$pull&lt;/code>类似，但是&lt;code>pullAll&lt;/code>是基于给定的列表，将列表中的元素从原来数组中删除。&lt;code>{ $pullAll: { &amp;lt;field1&amp;gt;: [ &amp;lt;value1&amp;gt;, &amp;lt;value2&amp;gt; ... ], ... } }&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="修饰符操作符">修饰符操作符&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作符名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$each&lt;/code>&lt;/td>
&lt;td>&lt;code>$each&lt;/code>后面跟一个数组，用于修饰&lt;code>$push&lt;/code>和&lt;code>$addToSet&lt;/code>，将后面的数组里的元素添加到匹配的数组里&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$position&lt;/code>&lt;/td>
&lt;td>用于修饰&lt;code>$push&lt;/code>，指定从数组 什么位置插入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$slice&lt;/code>&lt;/td>
&lt;td>与&lt;code>$push&lt;/code>和 &lt;code>$each&lt;/code>一起使用，先执行插入操作，而后对结果做切片处理，比如保留后面几个元素或者前面几个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$sort&lt;/code>&lt;/td>
&lt;td>与&lt;code>$push&lt;/code>和&lt;code>$each&lt;/code>一起使用，在执行插入的时候对元素进行排序&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="位运算操作符">位运算操作符&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>作符名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$bit&lt;/code>&lt;/td>
&lt;td>对整型数做位运算&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="行为-1">行为&lt;/h3>
&lt;ul>
&lt;li>执行update操作的用户需要有update，find和insert的权限&lt;/li>
&lt;li>&lt;code>db.collection.updateOne&lt;/code>只更新匹配到的文档里的第一个&lt;/li>
&lt;li>当&lt;code>Upset&lt;/code>设置为&lt;code>true&lt;/code>的时候且是作用在分片集合上时，匹配条件里必须要包含分片键值或者&lt;code>_id&lt;/code>字段&lt;/li>
&lt;li>如果更新大小固定的集合（capped collection）会使得文档大小发生变化，则更新失败&lt;/li>
&lt;li>无法从时序集合（time series collections）中更新文档&lt;/li>
&lt;/ul>
&lt;h3 id="示例-1">示例&lt;/h3>
&lt;p>&lt;strong>Upset更新&lt;/strong>&lt;/p>
&lt;p>给定下面的集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Central Perk Cafe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Borough&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Manhattan&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;violations&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Rock A Feller Bar and Grill&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Borough&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Queens&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;violations&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Empire State Pub&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Borough&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Brooklyn&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;violations&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">restaurant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateOne&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Pizza Rat&amp;#39;s Pizzaria&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">$set&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">violations&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">borough&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Manhattan&amp;#34;&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">upsert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于查找对应的记录且&lt;code>upsert&lt;/code>为&lt;code>true&lt;/code>，因此会以新的记录插入&lt;/p>
&lt;p>&lt;strong>更新数组元素&lt;/strong>&lt;/p>
&lt;p>给定下面的集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insert&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;grades&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">95&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">92&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;grades&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">98&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">102&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;grades&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mi">95&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">110&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行下面的命令，将&lt;code>_id&lt;/code>为2的记录中值大于等于100数组元素的值设置为100。&lt;code>filter&lt;/code>筛选出了数组元素大于100的文档，而后对第一个文档指定更新操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">students&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateOne&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">grades&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">$gte&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">$set&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grades.$[element]&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">arrayFilters&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">$gte&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>更新文档数组里的特定的元素&lt;/strong>&lt;/p>
&lt;p>给定下面的集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln"> 1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">students2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insert&lt;/span>&lt;span class="p">([&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s2">&amp;#34;grades&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grade&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;mean&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grade&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;mean&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grade&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;mean&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="s2">&amp;#34;grades&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grade&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;mean&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grade&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">87&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;mean&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;grade&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;mean&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;std&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行下面的命令，将&lt;code>_id&lt;/code>为1的文档中，文档数组里&lt;code>grade&lt;/code>大于等于85的数组元素中的&lt;code>mean&lt;/code>设置为100&lt;/p>
&lt;h2 id="删除集合和数据库">删除集合和数据库&lt;/h2>
&lt;p>命令 - 删除集合以及和该集合关联的索引&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令 - 删除数据库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dropDatabase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">writeConcern&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">ex&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nx">use&lt;/span> &lt;span class="nx">temp&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dropDatabase&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MongoDB学习笔记（二）- 文档插入</title><link>https://www.jonathanlin.top/posts/mongo-notes-02/</link><pubDate>Tue, 16 Nov 2021 15:03:57 +0800</pubDate><guid>https://www.jonathanlin.top/posts/mongo-notes-02/</guid><description>
&lt;h2 id="单个文档插入操作">单个文档插入操作&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>&lt;strong>&lt;code>db.collection.insertOne()&lt;/code>&lt;/strong>&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertOne&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">writeConcern&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>document&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>待插入集合的文档&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>writeConcern&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>可选。用于指定mongod对写操作的响应&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>返回值：&lt;/p>
&lt;p>包含下列元素的文档：&lt;/p>
&lt;ul>
&lt;li>&lt;code>acknowledged&lt;/code> - 如果指定了&lt;code>writeConcern&lt;/code>，值为 &lt;code>true&lt;/code> ；如果&lt;code>writeConcern&lt;/code>是disable的，值为&lt;code>false&lt;/code>&lt;/li>
&lt;li>&lt;code>insertedId&lt;/code> - 主键，也就是&lt;code>_id&lt;/code>的值&lt;/li>
&lt;/ul>
&lt;h3 id="行为">行为&lt;/h3>
&lt;ul>
&lt;li>执行&lt;code>insertOne()&lt;/code>时，&lt;strong>如果集合（表）不存在，那么会自动创建这个集合&lt;/strong>&lt;/li>
&lt;li>如果没有显式地给定&lt;code>_id&lt;/code>的值，那么&lt;code>mongod&lt;/code>或者客户端驱动会自动创建一个，并且值具有唯一性。如果插入的文档的&lt;code>_id&lt;/code>重复，则插入失败&lt;/li>
&lt;li>如果在事务中执行插入，那么不要显式地设置&lt;code>writeConcern&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="示例">示例&lt;/h3>
&lt;p>&lt;strong>插入的时候未指定主键&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">products&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertOne&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="s2">&amp;#34;acknowledged&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s2">&amp;#34;insertedId&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;56fc40f9d735c28df206d078&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>插入的时候指定主键&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">products&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertOne&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果指定的值为10主键&lt;code>_id&lt;/code>已经存在，这时候插入报类似下面的错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">11000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s2">&amp;#34;errmsg&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;E11000 duplicate key error collection: jonlimx_db.products index: _id_ dup key: { _id: 11.0 }&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="s2">&amp;#34;op&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s2">&amp;#34;item&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;qty&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多个文档插入">多个文档插入&lt;/h2>
&lt;h3 id="定义-1">定义&lt;/h3>
&lt;p>&lt;strong>&lt;code>db.collection.insertMany()&lt;/code>&lt;/strong>&lt;/p>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertMany&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">writeConcern&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nx">ordered&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kr">boolean&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[ &amp;lt;document 1&amp;gt; , &amp;lt;document 2&amp;gt;, ... ]&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>数组，待插入集合的文档列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>writeConcern&lt;/code>&lt;/td>
&lt;td>文档&lt;/td>
&lt;td>可选。用于指定mongod对写操作的响应&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ordered&lt;/code>&lt;/td>
&lt;td>布尔&lt;/td>
&lt;td>可选。指定mongod有序还是无序插入。默认值是&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>返回值：&lt;/p>
&lt;p>包含下列元素的文档：&lt;/p>
&lt;ul>
&lt;li>&lt;code>acknowledged&lt;/code> - 如果指定了&lt;code>writeConcern&lt;/code>，值为 &lt;code>true&lt;/code> ；如果&lt;code>writeConcern&lt;/code>是disable的，值为&lt;code>false&lt;/code>&lt;/li>
&lt;li>&lt;code>insertedIds&lt;/code> - 主键数组，也就是各个文档的&lt;code>_id&lt;/code>的值集合&lt;/li>
&lt;/ul>
&lt;h3 id="行为-1">行为&lt;/h3>
&lt;ul>
&lt;li>执行&lt;code>insertMany()&lt;/code>时，&lt;strong>如果集合（表）不存在，那么会自动创建这个集合&lt;/strong>&lt;/li>
&lt;li>如果没有显式地给定&lt;code>_id&lt;/code>的值，那么&lt;code>mongod&lt;/code>或者客户端驱动会自动创建一个，并且值具有唯一性。如果插入的文档的&lt;code>_id&lt;/code>重复，则插入失败&lt;/li>
&lt;li>默认情况下，&lt;code>mongod&lt;/code>按顺序插入。如果&lt;code>ordered&lt;/code>设为false，那么&lt;code>mongod&lt;/code>将以无序（或者按照性能优化重新排序）的方式插入&lt;/li>
&lt;li>&lt;strong>如果是有序的操作，后一个操作需要等前一个操作完成了再进行&lt;/strong>&lt;/li>
&lt;li>如果有序操作，当前操作发生错误，那么后面的操作则停止；&lt;strong>如果是无序操作，当前操作失败不影响后续操作进行&lt;/strong>&lt;/li>
&lt;li>数据库通过&lt;code>maxWriteBatchSize&lt;/code>控制每组最大的写操作次数，如果&lt;code>insertMany&lt;/code>批量插入的时候超过这个值，一般来说客户端驱动会把该组操作分解成多组&lt;/li>
&lt;/ul>
&lt;h3 id="示例-1">示例&lt;/h3>
&lt;p>&lt;strong>插入的时候未指定主键&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">products&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertMany&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;envelope&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;stamps&amp;#34;&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="nx">print&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="s2">&amp;#34;acknowledged&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s2">&amp;#34;insertedIds&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eea&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eeb&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eec&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>插入的时候指定重复主键&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">products&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertMany&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eea&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;envelope&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;stamps&amp;#34;&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于键值为&lt;code>61937128eae4d2a457051eea&lt;/code>的文档已经存在，导致该文档插入失败；又因为&lt;code>ordered&lt;/code>默认值为&lt;code>true&lt;/code>，后续的插入操作停止&lt;/p>
&lt;p>返回值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="s2">&amp;#34;writeErrors&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">11000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="s2">&amp;#34;errmsg&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;E11000 duplicate key error collection: jonlimx_db.products index: _id_ dup key: { _id: ObjectId(&amp;#39;61937128eae4d2a457051eea&amp;#39;) }&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s2">&amp;#34;op&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eea&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="s2">&amp;#34;item&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="s2">&amp;#34;qty&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="s2">&amp;#34;writeConcernErrors&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="s2">&amp;#34;nInserted&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="s2">&amp;#34;nUpserted&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="s2">&amp;#34;nMatched&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="s2">&amp;#34;nModified&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="s2">&amp;#34;nRemoved&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="s2">&amp;#34;upserted&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>插入的时候指定重复主键且ordered=false&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln">1&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">products&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertMany&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eea&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;envelope&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;stamps&amp;#34;&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="nx">qty&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">,&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">ordered&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回值 - 第一条插入失败，后面两条插入成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="s2">&amp;#34;writeErrors&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">11000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="s2">&amp;#34;errmsg&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;E11000 duplicate key error collection: jonlimx_db.products index: _id_ dup key: { _id: ObjectId(&amp;#39;61937128eae4d2a457051eea&amp;#39;) }&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="s2">&amp;#34;op&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">ObjectId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;61937128eae4d2a457051eea&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="s2">&amp;#34;item&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;card&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="s2">&amp;#34;qty&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">15&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="s2">&amp;#34;writeConcernErrors&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="s2">&amp;#34;nInserted&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="s2">&amp;#34;nUpserted&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="s2">&amp;#34;nMatched&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="s2">&amp;#34;nModified&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="s2">&amp;#34;nRemoved&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="s2">&amp;#34;upserted&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="p">]&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>C Primer Plus读书笔记（三）</title><link>https://www.jonathanlin.top/posts/c-primer-plus-notes-03/</link><pubDate>Wed, 08 Sep 2021 20:14:21 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-notes-03/</guid><description>
&lt;p>&lt;em>本文是《C Primer Plus》第九章至第十一章读书笔记，持续更新中。&lt;/em>&lt;/p>
&lt;h2 id="ch09-函数">ch09. 函数&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>函数原型、函数定义和函数调用&lt;/li>
&lt;li>函数的参数列表和返回值&lt;/li>
&lt;li>形参和实参&lt;/li>
&lt;li>函数类型&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>函数原型：任何程序在使用函数之前都要声明改函数的类型。&lt;strong>在函数调用前需要声明函数原型&lt;/strong>。函数原型是告诉编译器函数的类型。对于较小的函数，也可以把函数定义放在主调函数之前，这时候的函数定义也就是函数声明&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数定义：提供函数的实际代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>声明带有参数的函数时，可以只给定参数的类型而不需要提供参数的名字，比如：&lt;code>void show_n_char(char, int);&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数参数 - 主调函数通过参数将值传递给被调函数&lt;/p>
&lt;ul>
&lt;li>形式参数(formal argument) - 函数定义和声明中，参数列表里定义的参数&lt;/li>
&lt;li>实际参数(actual argument) - 具体的值，是主调函数赋值给形式参数的值，可以是常量、变量或者表达式。&lt;strong>在被调函数中使用的实际参数的值，是主调函数以拷贝的方式传递给被调函数，因此在被调函数中需值的修改不会影响原始数据&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>返回值 - 被调函数通过返回值将值传递给主调函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数类型，实际上是指函数的返回值类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>递归&lt;/p>
&lt;ul>
&lt;li>每一级递归函数里的变量都是私有的，即都属于对应层级的递归&lt;/li>
&lt;li>递归函数可能会快速消耗计算机内存，甚至耗尽。因此递归函数的层级受限于内存空间&lt;/li>
&lt;li>此外，递归本质是函数调用，由于递归引发的多次函数调用，对性能会有一定的影响&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>头文件 - 把函数原型和已定义的字符常量（#define)放在头文件中是一个良好的习惯，这样只需要在使用这些函数或者字符常量的地方通过#include引入头文件即可，避免了重复声明函数原型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针&lt;/p>
&lt;ul>
&lt;li>是一个值为内存地址的变量，也称为指针变量&lt;/li>
&lt;li>取地址操作：&lt;code>ptr = &amp;amp;pooh&lt;/code>，将&lt;code>pooh&lt;/code>地址赋给指针变量&lt;code>ptr&lt;/code>&lt;/li>
&lt;li>取值操作/间接运算法操作/解引用操作：&lt;code>val = *ptr&lt;/code>。实际上&lt;code>ptr = &amp;amp;pooh; val = *ptr;&lt;/code> 等价于&lt;code>val = pooh&lt;/code>&lt;/li>
&lt;li>声明指针：&lt;code>int * pi; char * pc; float pf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>函数参数的值传递和地址传递&lt;/p>
&lt;ul>
&lt;li>&lt;code>function(int num)&lt;/code> - 值传递，一般用于基于值进行计算&lt;/li>
&lt;li>&lt;code>function(int* num)&lt;/code> - 地址传递，一般用于在被调函数中修改主调函数的值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch10-数组和指针">ch10. 数组和指针&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>数组如何创建&lt;/li>
&lt;li>指针如何创建和使用&lt;/li>
&lt;li>数组和指针有何关系&lt;/li>
&lt;li>多维数组&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>数组：数据类型相同的一系列元素组成。声明数组必须告诉编译器数组的&lt;strong>元素个数&lt;/strong>和元素&lt;strong>数据类型&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组初始化：&lt;/p>
&lt;ul>
&lt;li>以逗号分割的值列表（花括号里）来初始化数组，如：&lt;code>int powers[3] = {1,2,3};&lt;/code>。注意，这种用花括号形式的赋值只能在初始化的时候，其他时候则不行&lt;/li>
&lt;li>经常使用符号常量来指定数组大小，如：&lt;code>int days[MONTHs] = {31,28,31};&lt;/code>&lt;/li>
&lt;li>&lt;code>const&lt;/code>数组和变量一样，都是表示只读类型，即初始化后只能读不能写&lt;/li>
&lt;li>使用数组前必须初始化，如果不初始化就读取，那么读取到的值不可靠&lt;/li>
&lt;li>如果只初始化部分数组元素，剩余的元素的值默认被设置为0&lt;/li>
&lt;li>创建数组时可以不指定数组大小，让编译器自动匹配数组大小，如：&lt;code>int days[] = {31,28,31};&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>指定初始化器&lt;/p>
&lt;ul>
&lt;li>使用指定初始化器，可以给特定下标的元素赋值，其他元素保持默认，如：&lt;code>int staff[] = {1,[6]=4,9,10};&lt;/code>，第0号元素为1，第6，7，8号元素分别是4，9和10，剩余元素默认为0&lt;/li>
&lt;li>如果多次初始化指定元素，后面的会覆盖前面的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>多维数组在计算机内部是按顺序存放数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二维数组初始化：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以看成是元素类型为一维数组的一维数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int sg[2][3] = {{5,6},{7,8}}&lt;/code> 定义了两行三列的二维数组，但是每行都只初始化了前两个元素，因此每行的第三个元素初始化为0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一种初始化方式是只用一对大括号，大括号里面的值依次按行付给数组元素。例如：&lt;code>int sg[2][3]={5,6,7,8}&lt;/code>，这样第一行的元素分别是5，6和7。而第二行是8和0&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>指针和数组&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数组名是该数组首元素的地址&lt;/strong>&lt;/li>
&lt;li>指针加1表示增加一个存储单元。这里的存储单元实际上对应指针所指向对象的数据类型对应的字节数&lt;/li>
&lt;li>数组加1后的地址是下一个元素的地址&lt;/li>
&lt;li>举例来说，定义一个数组&lt;code>ar&lt;/code>：
&lt;ul>
&lt;li>&lt;code>ar[n] = *(ar+n)&lt;/code>&lt;/li>
&lt;li>&lt;code>ar + n&lt;/code>的意义是：先定位到ar的位置，也就是首个元素的地址，然后移动n个存储单元&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>函数和数组&lt;/p>
&lt;ul>
&lt;li>处理数组的函数实际上是用指针作为参数&lt;/li>
&lt;li>在函数原型或者函数定义中，&lt;code>int *ar&lt;/code>和&lt;code>int[] ar&lt;/code>等价，也只有在函数原型或者定义中，这二者才能互换。&lt;strong>但是只有ar是指针变量的时候，才能使用&lt;code>ar++&lt;/code>这种操作，并且不支持&lt;code>++ar&lt;/code>&lt;/strong>&lt;/li>
&lt;li>函数原型中指定数组的两种方式：1）通过指针来指定数组首元素的地址 2）使用数组的定义&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在函数原型或者定义中指定数组元素个数的两种方式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在函数原型或者定义中指定数组的大小&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ar&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>在函数原型或者定义中指定数组的开始处和结束处&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">sump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sump(): %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>几点需要注意：&lt;/p>
&lt;ul>
&lt;li>&lt;code>end&lt;/code>实际上是指向数组最后一个元素的后面&lt;/li>
&lt;li>C保证在分配数组空间的时候，确保最后一个元素后面的第一个位置的指针仍然有效，&lt;strong>但是对存储在该位置上的值未做保证&lt;/strong>&lt;/li>
&lt;li>上面例子中，&lt;code>numbers + SIZE&lt;/code>就是指向最后一个元素的后面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>指针的几种操作&lt;/p>
&lt;ul>
&lt;li>赋值：&lt;code>ptr = &amp;amp;val&lt;/code>，把地址付给指针&lt;/li>
&lt;li>解引用：&lt;code>*&lt;/code>运算符给出指针指向的地址上存储的值。&lt;strong>注意：千万不要解引用未初始化的指针&lt;/strong>&lt;/li>
&lt;li>取值：&lt;code>ptr2 = &amp;amp;ptr1&lt;/code>，指针变量也有自己的地址和值&lt;/li>
&lt;li>指针与整数n相加：指针对应的地址+数组元素的数据类型的大小（字节为单位）*n， 实际上相当于数组的下标往后移动几个&lt;/li>
&lt;li>递增指针：实际相当于加1，数组下标往后移动一个&lt;/li>
&lt;li>指针减去一个整数：与整数相加相反，数组下标往前移动&lt;/li>
&lt;li>递减指针：数组下标往前移动一个&lt;/li>
&lt;li>指针求差：两个指针分别指向同一个数组的不同元素，通过计算求出两个元素之间的距离&lt;/li>
&lt;li>比较：两个指针都指向相同的类型才能比较&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在函数（参数）中传递数组&lt;/p>
&lt;ul>
&lt;li>数组时以指针的方式传递。如果数组也通过副本的方式传递，那么会占用大量的内容&lt;/li>
&lt;li>由于数组时通过指针传递，因此是可以在函数中直接修改参数的值&lt;/li>
&lt;li>为了避免在函数中修改参数的值，应该将数组声明为&lt;code>const&lt;/code>，例如：&lt;code>int sum(const int ar[], int n);&lt;/code>&lt;/li>
&lt;li>&lt;code>const&lt;/code>并不是要求原数组是常量，而是函数处理数组时将其视为常量。如果不小心在函数中修改了数组的值，编译器会报错&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>const的几种用法&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">定义&lt;/th>
&lt;th>指针是否可以修改指向别处&lt;/th>
&lt;th>指针指向的值是否可以修改&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>double rates[3] = {11.1, 22.2, 33.3}; const double * pd = rates;&lt;/code>&lt;/td>
&lt;td>是&lt;/td>
&lt;td>否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>double rates[3] = {11.1, 22.2, 33.3}; double * const pd = rates;&lt;/code>&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>double rates[3] = {11.1, 22.2, 33.3}; const double * const pd = rates;&lt;/code>&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>**const的修饰对象：**取决于和谁挨得近。如果和数据类型挨得近，那么是修饰对应的数据类型是const类型；如果和&lt;code>*&lt;/code>挨得近，则修饰指针，即指针本身的值不可以改变（不可以指向别处）&lt;/p>
&lt;p>此外还需要注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>把&lt;code>const&lt;/code>数据或者非&lt;code>const&lt;/code>数据的地址初始化为指向&lt;code>const&lt;/code>的指针是合法的。指向&lt;code>const&lt;/code>的指针意义在于无法通过该指针修改相应地址对应的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">rates1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">11.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">22.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">33.3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">44.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">55.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">66.6&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pd1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rates1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>只能把非&lt;code>const&lt;/code>数据的地址赋给普通指针。由于可以通过&lt;strong>普通指针&lt;/strong>修改指向的地址对应的值，因此如果将&lt;code>const&lt;/code>数据的地址赋给普通指针，那么&lt;code>const&lt;/code>数据将变的可以修改，这是&lt;strong>不合理&lt;/strong>的，这个将产生不可预期的结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">44.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">55.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">66.6&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pd3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rates2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 不应该这么做
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>二维数组 - &lt;code>int zippo[4][2] = {{ 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 }}&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>本质是数组元素为一维数组的一维数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zippo&lt;/code>：首元素地址，首元素为一维数组&lt;code>{2, 4}&lt;/code>，因此又是&lt;code>{2, 4}&lt;/code>的首地址，也就是元素2的地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>zippo[n]&lt;/code>：第n个元素的地址，也就是第n+1行的起始地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对于二维数组，需要两次解引用才能取到某个具体的值&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>zippo&lt;/code>&lt;/td>
&lt;td>首元素地址，实际上是第一行元素的起始地址。&lt;code>*zippo&lt;/code>取到第一行元素，&lt;code>**zippo&lt;/code>取到第一行元素的第一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>zippo + 2&lt;/code>&lt;/td>
&lt;td>第3行元素的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*(zippo + 2)&lt;/code>&lt;/td>
&lt;td>第3行元素的首元素地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*(zippo + 2)+1&lt;/code>&lt;/td>
&lt;td>第3行元素的第2个元素的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*(*(zippo + 2)+1)&lt;/code>&lt;/td>
&lt;td>第3行元素的第2个元素的值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int (*px)[2]&lt;/code> - 指向一个二维数组，且这个二维数组有两列，即n * 2。**注意：**要和&lt;code>int *px[2]&lt;/code>区分开，因为&lt;code>[]&lt;/code>的优先级高于&lt;code>*&lt;/code>，因此&lt;code>px&lt;/code>先和&lt;code>[]&lt;/code>结合这样就声明为元素个数为2的一维数组，然后该一维数组的元素数据类型是&lt;code>int*&lt;/code>，也就是：含有两个int指针的一维数组&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a1_20&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a1_21&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a1_3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a1_5&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a2_1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">a1_3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a1_5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a2_2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">a1_20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a1_21&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">// 下面这两种都不行。int (*)[2] 表示的指向四个元素的指针，即元素为int[4]的一位数组，也就是n*2的二维数组
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// int (* a2_3)[2] = { a1_20, a1_21 };
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// int (* a2_4)[2] = {{ 1, 2, }, { 1, 2 }};
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a22&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">}};&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">a2_5&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a22&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>函数声明中的参数是二维数组时，下面两种方式的定义都是等价：&lt;/p>
&lt;ul>
&lt;li>&lt;code>void somefunction(int (*pt)[4])&lt;/code>&lt;/li>
&lt;li>&lt;code>void somefunction(int pt[][4])&lt;/code> - 对于这种形式，第一个方括号一定留空，这样代表是一个指针，且该指针指向元素为4个元素的数组。第二个方括号里一定有一个值，否则pt这个指针无从知道它所指向的对象大小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>定长数组和变长数组&lt;/p>
&lt;ul>
&lt;li>定长数组：数组的长度是固定的，声明的时候需要使用常量或者常量表达式来指定数组的大小&lt;/li>
&lt;li>变长数组：创建数组的时候，可以使用变量来指定数组的大小。创建之后，则无法再修改数组大小。比如可以定义一个出来任意行列的二维数组：
&lt;ul>
&lt;li>&lt;code>int sum2d(int rows, int cols, int ar[rows][colds]&lt;/code>) - &lt;strong>注意：&lt;/strong>&lt;code>rows&lt;/code>和&lt;code>cols&lt;/code>必须放在&lt;code>ar&lt;/code>的定义前面&lt;/li>
&lt;li>&lt;code>int sum2d(int,int,int ar[*][*])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>复合字面量&lt;/p>
&lt;ul>
&lt;li>字面量 - 5是int类型字面量，'c'是char类型的字面量，81.3是double类型的字面量...&lt;/li>
&lt;li>&lt;code>(int [])(50,20,90)&lt;/code>是一维数组字面量，二维数组类似，这些就是复合字面量&lt;/li>
&lt;li>复合字面量可以很方便的给函数传递数组参数而不必事先创建数组，实际上复合字面量就是匿名数组&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch11-字符串和字符串函数">ch11. 字符串和字符串函数&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>字符串的表示形式&lt;/li>
&lt;li>C库中的字符和字符串函数的使用&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;strong>几种定义字符串的方式：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>字符串常量 - 用双引号括起来的内容称为字符串常量。编译器会在双引号的字符末尾自动加入&lt;code>\0&lt;/code>字符&lt;/p>
&lt;ul>
&lt;li>字符串常量属于静态存储类别，即该字符串只被存储一次&lt;/li>
&lt;li>&lt;strong>双引号括起来的内容被视为指向该字符串的存储位置的指针&lt;/strong>。例如：&lt;code>*&amp;quot;space farers&amp;quot;&lt;/code>表示的是对&amp;quot;space farers&amp;quot;的存储位置的地址解引用，那么取到的值就是该字符串的首个字符&lt;code>s&lt;/code>&lt;/li>
&lt;li>如果字符串中带有引号，那么需要在引号前面添加反斜杠&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>字符串数组和初始化&lt;/p>
&lt;ul>
&lt;li>&lt;code>char name[10] = &amp;quot;Jonathan&amp;quot;&lt;/code> - 在字符个数少于定义的数组个数时，用&lt;code>'\0'&lt;/code>补足。注意，如果用单个字符赋值，例如&lt;code>char name[10] = {'J', 'o', 'n', 'a', 't', 'h','a','n','\0'}&lt;/code>，最后一个字符一定得是&lt;code>'\0'&lt;/code>，否则会被认定是字符数组而不是字符串&lt;/li>
&lt;li>&lt;code>char name[] = &amp;quot;Jonathan&amp;quot;&lt;/code> - 这种不给定数组长度，那么编译器自动根据给定的字符串计算长度，当然最后会加上&lt;code>'\0'&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>数组和指针的区别 - 既然字符串可以使用字符数组来表示，而后数组实际上又是和指针相通，那么指针自然可以表示字符串&lt;/p>
&lt;ul>
&lt;li>&lt;code>char * head = &amp;quot;I love you&amp;quot;&lt;/code> - 这里的head是指针变量，因此可以修改head使得它指向其他的字符串&lt;/li>
&lt;li>&lt;code>char heart[] = &amp;quot;I love you&amp;quot; &lt;/code> - 这里的heart是常量，因为数组变量的值就是数组首个元素的地址，这个值是固定。因此不可以对heart本身再赋值。比如：&lt;code>heart = head&lt;/code>这个是不成立的&lt;/li>
&lt;li>&lt;code>char * head = &amp;quot;I love you&amp;quot;;*(head + 5) = 'T'&lt;/code> - &lt;strong>这是不推荐的做法&lt;/strong>，不同的编译器可能会导致不同的行为。对于&lt;code>&amp;quot;I love you&amp;quot;&lt;/code>这个字符串而言是存放在静态存储区，这里通过head修改了对应的静态存储区的值，会导致引用该字符串的所有其他变量都发生变化。因此，&lt;strong>建议在把指针初始化为字符串常量的时候使用const修饰符&lt;/strong>，即：&lt;code>const char * head = &amp;quot;I love you&amp;quot;&lt;/code>&lt;/li>
&lt;li>对于&lt;code>char heart[] = &amp;quot;I love you&amp;quot;&lt;/code>而言，实际上&lt;code>heart&lt;/code>并不是指向&lt;code>&amp;quot;I love you&amp;quot;&lt;/code>的静态存储区，数组实际上是获得了&lt;code>&amp;quot;I love you&amp;quot;&lt;/code>的副本。&lt;strong>所以，如果打算修改字符串，应该用数组形式而不是用指针&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>几种字符串输入方式的比较 - 字符串输入首先是需要预留存储该字符串的控件，然后使用输入函数获取字符串&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>scanf(&amp;quot;%s&amp;quot;, aStr)&lt;/code> - 只能读取一个单词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gets(astr) / puts(astr)&lt;/code> - 读取整行的输入直到遇到换行符，&lt;strong>然后丢弃换行符，接着在末尾添加一个空字符使其成为一个C字符串&lt;/strong>。&lt;strong>注意：&lt;/strong>&lt;code>gets&lt;/code>只有一个参数，即字符串的首地址，因此无法判断输入的字符串是否有足够的空间存储。如果超过了存储空间内，会出现不可预知的问题。&lt;code>puts&lt;/code>会在字符串末尾添加换行符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>fgets(astr,len,ioin)/fputs(astr, ioout)&lt;/code> - 通常和&lt;code>fputs&lt;/code>配合使用。有三个参数1) 字符串变量用于接收字符串 2) 字符串的长度（如果是n，最大那么读入n-1个字符，最后一个字符用&lt;code>\0&lt;/code>填充。在存储空间充足的情况下会把换行符也存储下来） 3) 指定要读入的文件，如果是键盘读入，则以&lt;code>stdin&lt;/code>作为输入。&lt;code>fputs&lt;/code>不会在字符串末尾添加换行符。&lt;strong>&lt;code>fgets&lt;/code>函数返回指向char的指针。如果读到文件末尾或者文件里空行，则返回一个特殊的指针NULL&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>输入函数&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>输出函数&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>scanf(&amp;quot;%s&amp;quot;, str)&lt;/code>&lt;/td>
&lt;td>输入空格则停止读取，即只能读取一个单词&lt;/td>
&lt;td>&lt;code>printf(&amp;quot;%s&amp;quot;,str)&lt;/code>&lt;/td>
&lt;td>打印一个字符串，不自动添加换行符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gets(astr)&lt;/code>&lt;/td>
&lt;td>读取整行。如果字符串过长&lt;strong>可能导致缓冲区溢出&lt;/strong>&lt;/td>
&lt;td>&lt;code>puts(astr)&lt;/code>&lt;/td>
&lt;td>打印一个字符串，&lt;strong>自动在末尾添加换行符&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fgets(astr,len,ioin)&lt;/code>&lt;/td>
&lt;td>从流中读取字符串。可能是文件流或者标准输入流&lt;/td>
&lt;td>&lt;code>fputs(astr, ioout)&lt;/code>&lt;/td>
&lt;td>输入字符串到流，不会自动添加换行符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>代码解读1：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#define STLEN 5
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter string (empty to exit)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">STLEN&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">STLEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">fputs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdout&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 如果输入的字符串长度超过STLEN，那么就先处理长度范围内的数据，然后继续处理剩余的
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fgets Done!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 字符串被空格分隔
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="err">➜&lt;/span> &lt;span class="n">ch11&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">out&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="n">Enter&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">empty&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">exit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">jonathan&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">jonathan&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">fgets&lt;/span> &lt;span class="n">Done&lt;/span>&lt;span class="o">!&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">jonathan&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="n">this&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">is&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="n">jonathan&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码解读2：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#define STLEN 10
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">STLEN&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter strings (empty line to quit):&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">STLEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 当按下回车后，缓冲区里的内容会发送给fgets函数。fgets会根据STLEN按长度来接收，不要忘记最后一个是&amp;#39;\0&amp;#39;
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 这里就先将下标移动到当前words的最后一个位置。取决于输入的字符串的长度。如果最后一个是回车，那么说明输入的长度小于STLEN
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 长度小于STLEN
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">words&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getchar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 如果输入长度大于STLEN，则丢弃掉超过STLEN之外的字符
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">words&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Done&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="err">➜&lt;/span> &lt;span class="n">iwanttodebug&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">out&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">Enter&lt;/span> &lt;span class="n">strings&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">empty&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">quit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">hello&lt;/span> &lt;span class="n">world&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="n">hello&lt;/span> &lt;span class="n">wor&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="n">hello&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="n">hello&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="n">Done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>空字符和空指针&lt;/p>
&lt;ul>
&lt;li>空字符：对应的编码是0，是整数类型&lt;/li>
&lt;li>空指针：是一个指针类型，指向一个无效的地址，它不会与任何数据的有效地址对应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Regex Cheatsheet</title><link>https://www.jonathanlin.top/posts/regex-cheatsheet/</link><pubDate>Thu, 02 Sep 2021 13:59:45 +0800</pubDate><guid>https://www.jonathanlin.top/posts/regex-cheatsheet/</guid><description>
&lt;h2 id="regular-expressions-cheat-sheet">Regular Expressions Cheat Sheet&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">符号&lt;/th>
&lt;th style="text-align:left">解释&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>示例说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">.&lt;/td>
&lt;td style="text-align:left">匹配任意字符&lt;/td>
&lt;td>b.t&lt;/td>
&lt;td>可以匹配bat/but/b#t/b1t等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\w&lt;/td>
&lt;td style="text-align:left">匹配字母，数字和下划线&lt;/td>
&lt;td>b\wt&lt;/td>
&lt;td>可以匹配but/b1t/b_1，但不能匹配b#t&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\s&lt;/td>
&lt;td style="text-align:left">匹配空白字符，包括\r，\n，\t&lt;/td>
&lt;td>love\syou&lt;/td>
&lt;td>匹配love you&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\d&lt;/td>
&lt;td style="text-align:left">匹配数字&lt;/td>
&lt;td>\d\d&lt;/td>
&lt;td>可以匹配01，23等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\b&lt;/td>
&lt;td style="text-align:left">限定字符串边界&lt;/td>
&lt;td>\bThe\b&lt;/td>
&lt;td>匹配The这个单词，不能匹配There。也就是The的前面和后面只能是空格&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">^&lt;/td>
&lt;td style="text-align:left">根据字符串的开头部分匹配&lt;/td>
&lt;td>^The&lt;/td>
&lt;td>匹配以The开头的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">$&lt;/td>
&lt;td style="text-align:left">根据字符串的结束部分匹配&lt;/td>
&lt;td>.exe$&lt;/td>
&lt;td>匹配以.exe结尾的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\W&lt;/td>
&lt;td style="text-align:left">匹配非字母，非数字和非下划线&lt;/td>
&lt;td>b\Wt&lt;/td>
&lt;td>可以匹配b#t，b@t等，但不能匹配but/b1t/b_1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\S&lt;/td>
&lt;td style="text-align:left">匹配非空白字符&lt;/td>
&lt;td>love\Syou&lt;/td>
&lt;td>可以匹配love#you，但不能匹配love you&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\D&lt;/td>
&lt;td style="text-align:left">匹配非数字&lt;/td>
&lt;td>\d\D&lt;/td>
&lt;td>可以匹配9$，3#等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">\B&lt;/td>
&lt;td style="text-align:left">与\b相反，匹配的字符串不处于边界&lt;/td>
&lt;td>\Bio\B&lt;/td>
&lt;td>可以匹配biological，因为io的前后都不是空格&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">[]&lt;/td>
&lt;td style="text-align:left">匹配字符集（中括号内）里的任意单一字符&lt;/td>
&lt;td>[aeiou]&lt;/td>
&lt;td>匹配a，e，i，o，u这几个元音字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">[^]&lt;/td>
&lt;td style="text-align:left">匹配不在字符集（中括号内）里的任意单一字符&lt;/td>
&lt;td>[^aeiou]&lt;/td>
&lt;td>匹配除了a，e，i，o，u这几个原因字符以外的字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">*&lt;/td>
&lt;td style="text-align:left">匹配0次或者多次&lt;/td>
&lt;td>bee*&lt;/td>
&lt;td>匹配be，bee或者beeeeee等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">+&lt;/td>
&lt;td style="text-align:left">匹配1次或者多次&lt;/td>
&lt;td>bee+&lt;/td>
&lt;td>匹配bee，beee或者beeeeee等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">?&lt;/td>
&lt;td style="text-align:left">匹配0次或者1次&lt;/td>
&lt;td>bee?&lt;/td>
&lt;td>匹配be或者bee&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">{N}&lt;/td>
&lt;td style="text-align:left">匹配N次&lt;/td>
&lt;td>be{3}&lt;/td>
&lt;td>匹配beee&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">{M,}&lt;/td>
&lt;td style="text-align:left">至少匹配M次&lt;/td>
&lt;td>be{3,}&lt;/td>
&lt;td>匹配beee，beeeeeee等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">{N,M}&lt;/td>
&lt;td style="text-align:left">匹配至少M次，至多N次&lt;/td>
&lt;td>be{3,5}&lt;/td>
&lt;td>匹配beee，beeee，beeeee&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">|&lt;/td>
&lt;td style="text-align:left">分支&lt;/td>
&lt;td>foo|bar&lt;/td>
&lt;td>匹配foo或者bar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">(exp)&lt;/td>
&lt;td style="text-align:left">匹配exp并且捕获到自动命名的组中&lt;/td>
&lt;td>&lt;/td>
&lt;td>这里的重点是自动命名的组里，至于如何匹配完全取决于exp如何定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">(?&lt;name>exp)&lt;/td>
&lt;td style="text-align:left">匹配exp并且捕获到名为name的组中&lt;/td>
&lt;td>&lt;/td>
&lt;td>这里的重点是命名组，至于如何匹配完全取决于exp如何定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">(?:exp)&lt;/td>
&lt;td style="text-align:left">匹配exp但是不捕获匹配的文本&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">(?=exp)&lt;/td>
&lt;td style="text-align:left">对exp前面的文本进行匹配&lt;/td>
&lt;td>\b\w+(?=ing)&lt;/td>
&lt;td>匹配I'm reading中的read&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">(?&amp;lt;=exp)&lt;/td>
&lt;td style="text-align:left">对exp后面的文本进行匹配&lt;/td>
&lt;td>(?&amp;lt;=\bread)\w+\b&lt;/td>
&lt;td>匹配I'm reading中的ing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">*？&lt;/td>
&lt;td style="text-align:left">重复任意次，但尽可能少重复&lt;/td>
&lt;td>b\w*?p&lt;/td>
&lt;td>bephellobeep会匹配出bep和beep。但是如果正则为b\w*p，那么匹配的结果是bephellobeep&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">+？&lt;/td>
&lt;td style="text-align:left">重复1次或者多次，但尽可能少重复&lt;/td>
&lt;td>&lt;/td>
&lt;td>原理同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">??&lt;/td>
&lt;td style="text-align:left">重复0次或者1次，但尽可能少重复&lt;/td>
&lt;td>&lt;/td>
&lt;td>原理同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">{M,N}?&lt;/td>
&lt;td style="text-align:left">重复M到N次，但尽可能少重复&lt;/td>
&lt;td>&lt;/td>
&lt;td>原理同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">{M,}?&lt;/td>
&lt;td style="text-align:left">重复M次以及以上，但尽可能少重复&lt;/td>
&lt;td>&lt;/td>
&lt;td>原理同上&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>MongoDB学习笔记（一）- 文档查询和投影</title><link>https://www.jonathanlin.top/posts/mongo-notes-01/</link><pubDate>Thu, 05 Aug 2021 13:48:47 +0800</pubDate><guid>https://www.jonathanlin.top/posts/mongo-notes-01/</guid><description>
&lt;h2 id="安装mongodb">安装mongodb&lt;/h2>
&lt;p>我使用的是macOS bigsur，因此这里记录的是在mac下安装mongodb社区版。在mac下最便捷的安装方式就是使用&lt;code>brew&lt;/code>来安装，使用以下命令：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>添加官方tap&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>brew tap mongodb/brew
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装mongo全家桶，包括社区版服务端，Shell和数据库相关工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>brew install mongodb-community
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>安装完成后，对应的二进制文件和配置文件的位置如下：（Intel处理器）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件&lt;/th>
&lt;th>位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>二进制可执行文件&lt;/td>
&lt;td>/usr/local/Cellar/mongodb-community/5.0.1/bin&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>配置文件&lt;/td>
&lt;td>/usr/local/etc/mongod.conf&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>日志文件&lt;/td>
&lt;td>/usr/local/var/log/mongodb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据文件&lt;/td>
&lt;td>/usr/local/var/mongodb&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>MongoDB官方提供了以供学习用的示例数据集合，可以从https://atlas-education.s3.amazonaws.com/sampledata.archive下载，关于示例数据集的详细信息，可以参考：&lt;a href="https://www.mongodb.com/developer/article/atlas-sample-datasets/#std-label-atlas-sample-data-local-installation">The MongoDB Atlas Sample Datasets&lt;/a>。&lt;/p>
&lt;h2 id="以服务的方式启动停止mongodb">以服务的方式启动/停止mongodb&lt;/h2>
&lt;p>启动mongodb服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>brew services start mongodb-community@5.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务启动后，可以通过&lt;code>mongo&lt;/code>命令连接并进入shell。&lt;/p>
&lt;p>停止mongodb服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>brew services stop mongodb-community@5.0
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mongodb查询操作">mongodb查询操作&lt;/h2>
&lt;p>这里介绍的关于mongodb的查询操作（&lt;strong>MQL&lt;/strong>）是通过&lt;code>mongosh&lt;/code>方法来实现的，这些方法底层是基于&lt;code>JavaScript&lt;/code>，但是如果你使用&lt;code>JavaScript&lt;/code>来连接那么你应该参考相应语言的包（&lt;a href="https://docs.mongodb.com/drivers/">idiomatic driver&lt;/a> ）。关于新增、删除和更新的方法可以查看文档：&lt;a href="https://docs.mongodb.com/manual/reference/method/">mongosh Methods — MongoDB Manual&lt;/a>。这里记录一下查找方法的使用。&lt;/p>
&lt;h3 id="方法定义">方法定义&lt;/h3>
&lt;p>方法定义：&lt;code>db.collection.find(query, projection)&lt;/code>&lt;/p>
&lt;p>参数列表如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>参数类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>query&lt;/td>
&lt;td>document&lt;/td>
&lt;td>可选参数。使用&lt;a href="#%E6%9F%A5%E8%AF%A2%E9%80%89%E6%8B%A9%E5%99%A8">查询选择器&lt;/a>构建查询条件。如果你希望返回集合里的所有文档，那么忽略这个参数，或者传递一个空的文档(&lt;code>{}&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>projecttion&lt;/td>
&lt;td>document&lt;/td>
&lt;td>可选参数。对查询结果进行筛选，选择性的返回指定的字段而不是包含文档里的所有字段。如果希望返回文档里的所有字段，则忽略该参数。关于更多细节，请参看：&lt;a href="#Projection%E6%8A%95%E5%BD%B1">Projection(投影)&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>构建query的时候，会涉及到字段或者嵌套字段。所谓嵌套字段是指子文档里的字段。指定嵌套的字段的方式有两种：&lt;/p>
&lt;ul>
&lt;li>点标记法：&lt;code>&amp;quot;field.nestedfield&amp;quot;: &amp;lt;value&amp;gt;&lt;/code>&lt;/li>
&lt;li>嵌套的方式：&lt;code>{ field: { nestedfield: &amp;lt;value&amp;gt; } }&lt;/code> （**注意：**这种方式和点标记法不一样，这种方式将匹配名称为&lt;code>filed&lt;/code>的子文档，子文档只包含一个名为&lt;code>nestedfield&lt;/code>的字段）&lt;/li>
&lt;/ul>
&lt;h3 id="查询选择器">查询选择器&lt;/h3>
&lt;p>这部分官网有很好的解释说明，详见：&lt;a href="https://docs.mongodb.com/manual/reference/operator/query/#query-selectors">Query and Projection Operators — MongoDB Manual&lt;/a>&lt;/p>
&lt;h4 id="比较">比较&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数学运算符（SQL）&lt;/th>
&lt;th>MQL运算符&lt;/th>
&lt;th>语法说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>=&lt;/td>
&lt;td>$eq&lt;/td>
&lt;td>&lt;code>{ &amp;lt;field&amp;gt;: { $eq: &amp;lt;value&amp;gt; } }&lt;/code> 如果&lt;code>value&lt;/code>不是正则表达式，也可以写成&lt;code>{ field: &amp;lt;value&amp;gt; }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;&lt;/td>
&lt;td>$gt&lt;/td>
&lt;td>&lt;code>{field: {$gt: value} }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;=&lt;/td>
&lt;td>$gte&lt;/td>
&lt;td>&lt;code>{field: {$gte: value} }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>in&lt;/td>
&lt;td>$in&lt;/td>
&lt;td>&lt;code>{ field: { $in: [&amp;lt;value1&amp;gt;, &amp;lt;value2&amp;gt;, ... &amp;lt;valueN&amp;gt; ] } }&lt;/code> 字段的值&lt;strong>在&lt;/strong>给定的数组里&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;&lt;/td>
&lt;td>$lt&lt;/td>
&lt;td>&lt;code>{field: {$lt: value} }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;=&lt;/td>
&lt;td>$lte&lt;/td>
&lt;td>&lt;code>{ field: { $lte: value} }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!=&lt;/td>
&lt;td>$ne&lt;/td>
&lt;td>&lt;code>{field: {$ne: value} }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>not in&lt;/td>
&lt;td>$nin&lt;/td>
&lt;td>&lt;code>{ field: { $nin: [ &amp;lt;value1&amp;gt;, &amp;lt;value2&amp;gt; ... &amp;lt;valueN&amp;gt; ]} }&lt;/code>字段的值&lt;strong>不在&lt;/strong>给定的数组里&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>注意：&lt;/strong> 在进行比较的时候，比较操作符两边的数据需要是相同的BSON类型（&lt;a href="https://docs.mongodb.com/manual/reference/bson-type-comparison-order/#std-label-bson-types-comparison-order">Comparison/Sort Order — MongoDB Manual&lt;/a>）&lt;/p>
&lt;p>对于同一个字段的范围的判断，可以使用下面提到的&lt;code>$and&lt;/code>逻辑运算，也可以简单的放在一起：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>birth: &lt;span class="o">{&lt;/span>&lt;span class="nv">$gt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1940-01-01&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>, &lt;span class="nv">$lt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1960-01-01&amp;#34;&lt;/span>&lt;span class="o">)}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>&lt;span class="nv">$and&lt;/span>:&lt;span class="o">[{&lt;/span>birth:&lt;span class="o">{&lt;/span>&lt;span class="nv">$gt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1940-01-01&amp;#34;&lt;/span>&lt;span class="o">)}}&lt;/span>,&lt;span class="o">{&lt;/span>birth:&lt;span class="o">{&lt;/span>&lt;span class="nv">$lt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1960-01-01&amp;#34;&lt;/span>&lt;span class="o">)}}]})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="逻辑运算">逻辑运算&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>MQL运算符&lt;/th>
&lt;th>语法说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$and&lt;/td>
&lt;td>&lt;code>{ $and: [ { &amp;lt;expression1&amp;gt; }, { &amp;lt;expression2&amp;gt; } , ... , { &amp;lt;expressionN&amp;gt; } ] }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$not&lt;/td>
&lt;td>&lt;code>{ field: { $not: { &amp;lt;operator-expression&amp;gt; } } }&lt;/code>注意&lt;code>{ $not: { $gt: 1.99 } }&lt;/code>和&lt;code>{ $lte: 1.99 }&lt;/code>不一样，&lt;strong>如果字段不存在，前者会匹配到，但是后者得存在才能匹配到&lt;/strong>。原因是前者不大于1.99包括小于等于1.99，也包括不存在的，后者明确就是小于等于1.99&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$nor&lt;/td>
&lt;td>&lt;code>{ $nor: [ { &amp;lt;expression1&amp;gt; }, { &amp;lt;expression2&amp;gt; }, ... { &amp;lt;expressionN&amp;gt; } ] }&lt;/code>匹配表达式列列表都不满足情况，&lt;strong>如果表达式中涉及到的所有字段都不存在，也会匹配出来&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$or&lt;/td>
&lt;td>&lt;code>{ $or: [ { &amp;lt;expression1&amp;gt; }, { &amp;lt;expression2&amp;gt; }, ... , { &amp;lt;expressionN&amp;gt; } ] }&lt;/code>匹配表达式列表中的一个或者多个&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>$not&lt;/code>用于修饰数学符号来实现不大于、不小于诸如此类，而&lt;code>$and&lt;/code> &lt;code>$not&lt;/code> &lt;code>$nor&lt;/code>是用于逻辑表达式之间的运算(逻辑表达式由字段和数学表达式构成)，这里要区分开。&lt;/p>
&lt;h4 id="元素element">元素（Element）&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>MQL运算符&lt;/th>
&lt;th>语法说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$exists&lt;/td>
&lt;td>&lt;code>{ field: { $exists: &amp;lt;boolean&amp;gt; } }&lt;/code>匹配某个字段是否存在。如果值是&lt;code>true&lt;/code>那么会匹配到字段存在的或者值为&lt;code>null&lt;/code>的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$type&lt;/td>
&lt;td>&lt;code>{ field: { $type: &amp;lt;BSON type&amp;gt; } }&lt;/code>或者&lt;code>{ field: { $type: [ &amp;lt;BSON type1&amp;gt; , &amp;lt;BSON type2&amp;gt;, ... ] } }&lt;/code>根据字段的类型匹配，可以匹配某种特定类型，或者几种类型中的一种。&lt;code>BSON&lt;/code>的支持的类型：&lt;a href="https://docs.mongodb.com/manual/reference/operator/query/type/#std-label-document-type-available-types">$type — MongoDB Manual&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="评估evaluation">评估（Evaluation）&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>MQL运算符&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$expr&lt;/td>
&lt;td>在query中使用复杂表达式来查询文档 &lt;a href="https://docs.mongodb.com/manual/reference/operator/query/expr/">$expr — MongoDB Manual&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$jsonSchema&lt;/td>
&lt;td>校验文档的schema&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$mod&lt;/td>
&lt;td>取模运算&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$regex&lt;/td>
&lt;td>使用正则表达式来匹配 &lt;a href="https://docs.mongodb.com/manual/reference/operator/query/regex/">$regex — MongoDB Manual&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$text&lt;/td>
&lt;td>使用文本搜索来匹配字段，前提是这个字段上有text索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$where&lt;/td>
&lt;td>使用自定义的JS表达式或者方法进行匹配&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="数组array">数组（Array)&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>MQL运算符&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$all&lt;/td>
&lt;td>通过文档数组里的元素进行匹配，数组元素需要满足$all中定义的所有条件。类似$and&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$elemMatch&lt;/td>
&lt;td>通过文档数组里的元素进行匹配，数组元素中的一个或者多个需要满足条件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$size&lt;/td>
&lt;td>通过文档数组元素的个数进行匹配&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="projection投影">Projection(投影)&lt;/h3>
&lt;p>投影的目的是将query的结果按要求返回，比如需要返回哪些字段、返回几个符合条件的数组元素。&lt;strong>注意&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>包含或者排除，&lt;strong>这二者在投影里是互斥的&lt;/strong>。即指定了包含的字段，那么结果仅返回指定的字段，如果指定了排除的字段，那么返回的结果不包含被排除的字段&lt;/li>
&lt;li>&lt;code>_id&lt;/code>是特例，默认是包含在返回结果里，如果不希望结果里返回，是需要在投影里排除掉。&lt;code>_id&lt;/code>的排除是可以和其他字段的包含同时存在&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Projection&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;field&amp;gt;: &amp;lt;1 or true&amp;gt;&lt;/code>&lt;/td>
&lt;td>结果中包含某个字段。只要是非0的整型数字，都会被当成&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;field&amp;gt;: &amp;lt;0 or false&amp;gt;&lt;/code>&lt;/td>
&lt;td>结果中&lt;strong>排除&lt;/strong>某个字段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;field&amp;gt;: &amp;lt;aggregation expression&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;em>TODO - 待补充&lt;/em>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>关于对于数组的投影，参考以下操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>MQL运算符&lt;/th>
&lt;th>语法说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$&lt;/td>
&lt;td>&lt;code>db.collection.find( { &amp;lt;array&amp;gt;: &amp;lt;condition&amp;gt; ... },{ &amp;quot;&amp;lt;array&amp;gt;.$&amp;quot;: 1 } )&lt;/code> &lt;code>db.collection.find( { &amp;lt;array.field&amp;gt;: &amp;lt;condition&amp;gt; ...}, { &amp;quot;&amp;lt;array&amp;gt;.$&amp;quot;: 1 } )&lt;/code> 查找条件是基于文档内部的数组元素，通过&lt;code>$&lt;/code>投影出符合条件的第一个数组元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$elemMatch&lt;/td>
&lt;td>与&lt;code>$&lt;/code>类似，投影出符合条件的第一个数组元素。&lt;code>$elemMatch&lt;/code>是在query的结果上，对数组元组的一个或者多个进行继续过滤：&lt;code>db.collection.find( { query, array: {$elemMatch: {condition ...}} ... }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$meta&lt;/td>
&lt;td>获取文档相关的元数据，包括&lt;code>textScore&lt;/code>和&lt;code>indexKey&lt;/code>。&lt;code>textScore&lt;/code>和query中的&lt;code>text&lt;/code>一起使用，表示文档和query的匹配程度；&lt;code>indexKey&lt;/code>顾名思义获取文档对应的非text类型的索引键，主要用于调试目的（??）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$slice&lt;/td>
&lt;td>返回符合query条件的数组元素的切片。&lt;code>db.collection.find(&amp;lt;query&amp;gt;,{ &amp;lt;arrayField&amp;gt;: { $slice: &amp;lt;number&amp;gt; } });&lt;/code>或者&lt;code>db.collection.find(&amp;lt;query&amp;gt;,{ &amp;lt;arrayField&amp;gt;: { $slice: [ &amp;lt;number&amp;gt;, &amp;lt;number&amp;gt; ] } });&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="查询示例">查询示例&lt;/h2>
&lt;p>这个部分的数据来源是官方&lt;code>bios&lt;/code>数据集：&lt;a href="https://docs.mongodb.com/manual/reference/bios-example-collection/">The bios Example Collection — MongoDB Manual&lt;/a>&lt;/p>
&lt;p>&lt;strong>查询所有文档&lt;/strong>&lt;/p>
&lt;p>&lt;code>find()&lt;/code>方法的query部分不传值，或者传递一个空的文档，那么返回的接口就是所有文档。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>按照特定的值查询&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查找&lt;code>_id&lt;/code>为5的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>_id: 5&lt;span class="o">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找&lt;code>name&lt;/code>子文档里&lt;code>last&lt;/code>的值为&amp;quot;Hopper&amp;quot;的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>&lt;span class="s2">&amp;#34;name.last&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Hopper&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>使用&lt;a href="#%E6%9F%A5%E8%AF%A2%E9%80%89%E6%8B%A9%E5%99%A8%5D">查询选择器&lt;/a>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查找&lt;code>_id&lt;/code>的值等于5或者等于&lt;code>ObjectId(&amp;quot;51e062189c6ae665454e301d&amp;quot;)&lt;/code>的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>_id: &lt;span class="o">{&lt;/span>&lt;span class="nv">$in&lt;/span>: &lt;span class="o">[&lt;/span>5, ObjectId&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;51e062189c6ae665454e301d&amp;#34;&lt;/span>&lt;span class="o">)]}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找&lt;code>birth&lt;/code>在1950之后的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>birth: &lt;span class="o">{&lt;/span>&lt;span class="nv">$gt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1950-01-01&amp;#34;&lt;/span>&lt;span class="o">)}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用正则表达式查找&lt;code>name&lt;/code>子文档下&lt;code>last&lt;/code>以N开头的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;name.last&amp;#34;&lt;/span>: &lt;span class="o">{&lt;/span> &lt;span class="nv">$regex&lt;/span>: /^N/ &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;code>$regex&lt;/code>的语法格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>&lt;span class="o">{&lt;/span> &amp;lt;field&amp;gt;: &lt;span class="o">{&lt;/span> &lt;span class="nv">$regex&lt;/span>: /pattern/, &lt;span class="nv">$options&lt;/span>: &lt;span class="s1">&amp;#39;&amp;lt;options&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">{&lt;/span> &amp;lt;field&amp;gt;: &lt;span class="o">{&lt;/span> &lt;span class="nv">$regex&lt;/span>: &lt;span class="s1">&amp;#39;pattern&amp;#39;&lt;/span>, &lt;span class="nv">$options&lt;/span>: &lt;span class="s1">&amp;#39;&amp;lt;options&amp;gt;&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">{&lt;/span> &amp;lt;field&amp;gt;: &lt;span class="o">{&lt;/span> &lt;span class="nv">$regex&lt;/span>: /pattern/&amp;lt;options&amp;gt; &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>按照值范围查询&lt;/strong>&lt;/p>
&lt;p>查找&lt;code>birth&lt;/code>在1940和1960之间的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>birth: &lt;span class="o">{&lt;/span>&lt;span class="nv">$gt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1940-01-01&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>, &lt;span class="nv">$lt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1960-01-01&amp;#34;&lt;/span>&lt;span class="o">)}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>根据多个条件查询&lt;/strong>&lt;/p>
&lt;p>查找&lt;code>birth&lt;/code>在1920之后，且&lt;code>death&lt;/code>为false的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> birth: &lt;span class="o">{&lt;/span> &lt;span class="nv">$gt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;1920-01-01&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">}&lt;/span>,
&lt;span class="ln">3&lt;/span> death: &lt;span class="o">{&lt;/span> &lt;span class="nv">$exists&lt;/span>: &lt;span class="nb">false&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者使用&lt;code>$and&lt;/code>操作符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>&lt;span class="nv">$and&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span>birth: &lt;span class="o">{&lt;/span>&lt;span class="nv">$gt&lt;/span>: new Date&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;1920-01-01&amp;#34;&lt;/span>&lt;span class="o">)}}&lt;/span>,
&lt;span class="ln">3&lt;/span> &lt;span class="o">{&lt;/span>death: &lt;span class="o">{&lt;/span>&lt;span class="nv">$exists&lt;/span>: false&lt;span class="o">}}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">]})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>精确匹配子文档&lt;/strong>&lt;/p>
&lt;p>所谓精确匹配是指&lt;strong>要求子文档的字段的个数以及字段顺序与给定的查询条件中的子文档一致&lt;/strong>。下面的例子中，要求匹配&lt;code>name&lt;/code>子文档的&lt;code>first&lt;/code>为Yukihiro，&lt;code>last&lt;/code>为Matsumoto，文档中这两个字段的顺序也是要匹配上&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span> name: &lt;span class="o">{&lt;/span> first: &lt;span class="s2">&amp;#34;Yukihiro&amp;#34;&lt;/span>, last: &lt;span class="s2">&amp;#34;Matsumoto&amp;#34;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面的两种情况无法匹配成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="nt">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Yukihiro&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;aka&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Matz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Matsumoto&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;last&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Matsumoto&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;first&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Yukihiro&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>匹配子文档的字段&lt;/strong>&lt;/p>
&lt;p>使用点标记法匹配子文档字段。例如查找&lt;code>name&lt;/code>子文档下&lt;code>first&lt;/code>为Yukihiro且&lt;code>last&lt;/code>为Matsumoto的文档&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s2">&amp;#34;name.first&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Yukihiro&amp;#34;&lt;/span>,
&lt;span class="ln">4&lt;/span> &lt;span class="s2">&amp;#34;name.last&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Matsumoto&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>根据数组元素(数组元素类型为简单类型)来查找&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查找&lt;code>contribs&lt;/code>数组里含有&lt;code>UNIX&lt;/code>元素的文档（至少有一个元素符合即可）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>contribs: &lt;span class="s2">&amp;#34;UNIX&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找&lt;code>contribs&lt;/code>数组里含有&lt;code>ALGOL&lt;/code>或者&lt;code>Lisp&lt;/code>元素的文档（至少有一个元素在$in列表里）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>contribs: &lt;span class="o">{&lt;/span>&lt;span class="nv">$in&lt;/span>: &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;ALGOL&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;Lisp&amp;#34;&lt;/span>&lt;span class="o">]}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找&lt;code>contribs&lt;/code>数组里含有&lt;code>ALGOL&lt;/code>和&lt;code>Lisp&lt;/code>元素的文档（&lt;strong>至少包含&lt;/strong>$all里定义的所有元素）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>contribs: &lt;span class="o">{&lt;/span>&lt;span class="nv">$all&lt;/span>: &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;ALGOL&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;Lisp&amp;#34;&lt;/span>&lt;span class="o">]}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找&lt;code>contribs&lt;/code>数组大小为4的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">({&lt;/span>contribs: &lt;span class="o">{&lt;/span>&lt;span class="nv">$size&lt;/span>: 4&lt;span class="o">}})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>根据数组元素(数组元素类型为文档类型)来查找&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查找&lt;code>awards&lt;/code>数组下的子文档中的&lt;code>award&lt;/code>的值为&lt;code>Turing Award&lt;/code>的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;awards.award&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Turing Award&amp;#34;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找&lt;code>awards&lt;/code>数组元素中&lt;code>award&lt;/code>的值为&lt;code>Turing Award&lt;/code>且&lt;code>year&lt;/code>(这里必须要在一个数组元素同时满足)大于1999的文档：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span> awards: &lt;span class="o">{&lt;/span> &lt;span class="nv">$elemMatch&lt;/span>: &lt;span class="o">{&lt;/span> award: &lt;span class="s2">&amp;#34;Turing Award&amp;#34;&lt;/span>, year: &lt;span class="o">{&lt;/span> &lt;span class="nv">$gt&lt;/span>: &lt;span class="m">2000&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的查询可以匹配：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="s2">&amp;#34;awards&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;award&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Rosing Prize&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1999&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Norwegian Data Association&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;award&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Turing Award&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2001&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ACM&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;award&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;IEEE John von Neumann Medal&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2001&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;IEEE&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>但是无法匹配：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span>&lt;span class="s2">&amp;#34;awards&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nt">&amp;#34;award&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Turing Award&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nt">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1983&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nt">&amp;#34;by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ACM&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nt">&amp;#34;award&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;National Medal of Technology&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nt">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1998&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nt">&amp;#34;by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;United States&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nt">&amp;#34;award&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Japan Prize&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="nt">&amp;#34;year&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2011&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="nt">&amp;#34;by&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;The Japan Prize Foundation&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果这里不使用&lt;code>elemMatch&lt;/code>而是使用下面的方式，结果返回的是&lt;code>awards&lt;/code>元素里包含&lt;code>award&lt;/code>为”Turing Award“和&lt;code>year&lt;/code>大于1975的元素。这两个条件是要求&lt;code>awards&lt;/code>下的所有元素里，满足这两个条件即可。这两个条件是限制在&lt;code>awards&lt;/code>上，不是限制在单一的数组元素上，因此上面无法匹配的例子也可以被下面的查询匹配。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="s2">&amp;#34;awards.award&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Turing Award&amp;#34;&lt;/span> ,
&lt;span class="ln">4&lt;/span> &lt;span class="s2">&amp;#34;awards.year&amp;#34;&lt;/span>: &lt;span class="o">{&lt;/span>&lt;span class="nv">$gt&lt;/span>: 1975&lt;span class="o">}&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="投影示例">投影示例&lt;/h2>
&lt;p>&lt;strong>指定要包含的字段&lt;/strong>&lt;/p>
&lt;p>查找&lt;code>bios&lt;/code>集合里所有文档并返回文档的&lt;code>name&lt;/code>和&lt;code>contribs&lt;/code>字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">}&lt;/span>, &lt;span class="o">{&lt;/span> name: 1, contribs: &lt;span class="m">1&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>指定要排除的字段&lt;/strong>&lt;/p>
&lt;p>查找&lt;code>bios&lt;/code>集合里&lt;code>contribs&lt;/code>为OOP的集合，返回的时候排除掉&lt;code>name.first&lt;/code>和&lt;code>birth&lt;/code>字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span> contribs: &lt;span class="s1">&amp;#39;OOP&amp;#39;&lt;/span> &lt;span class="o">}&lt;/span>,
&lt;span class="ln">3&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s1">&amp;#39;name.first&amp;#39;&lt;/span>: 0, birth: &lt;span class="m">0&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>显式排除&lt;code>_id&lt;/code>字段&lt;/strong>&lt;/p>
&lt;p>查找&lt;code>bios&lt;/code>集合里所有文档并返回文档的&lt;code>name&lt;/code>和&lt;code>contribs&lt;/code>字段但不包括&lt;code>_id&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">}&lt;/span>,
&lt;span class="ln">3&lt;/span> &lt;span class="o">{&lt;/span> name: 1, contribs: 1, _id: &lt;span class="m">0&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>对子文档和数组投影&lt;/strong>&lt;/p>
&lt;p>查找&lt;code>bios&lt;/code>集合里的所有文档并返回&lt;code>name.last&lt;/code>，以及&lt;code>contribs&lt;/code>数组里的前两个元素&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="ln">1&lt;/span>db.bios.find&lt;span class="o">(&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{}&lt;/span>,
&lt;span class="ln">3&lt;/span> &lt;span class="o">{&lt;/span>_id: 0, &lt;span class="s1">&amp;#39;name.last&amp;#39;&lt;/span>: 1, contribs: &lt;span class="o">{&lt;/span>&lt;span class="nv">$slice&lt;/span>: 2&lt;span class="o">}}&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>C Primer Plus 编程练习</title><link>https://www.jonathanlin.top/posts/c-primer-plus-handson/</link><pubDate>Fri, 23 Jul 2021 23:35:03 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-handson/</guid><description>
&lt;h2 id="ch06-c控制语句循环">ch06. C控制语句：循环&lt;/h2>
&lt;blockquote>
&lt;ol start="5">
&lt;li>
&lt;p>编写一个程序，提示用户输入大写字母。使用嵌套循环以下面金字塔型的格式打印字母：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span> &lt;span class="n">A&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="n">ABA&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">ABCBA&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">ABCDCBA&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">ABCDEDCBA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>提示：用外层循环处理行，每行使用3个内层循环，分别处理空格、以升序打印字母、以降序打印字母。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：外层循环处理行容易实现，但是使用3个内层循环控制空格、升序字母和降序空格字母似乎有点多。这里可以结合条件判断，是的内层只需要一个循环搞定空格、升降序字母的打印。这里有几点比较关键&lt;/p>
&lt;ul>
&lt;li>每行有多少个空格&lt;/li>
&lt;li>每个一共要打印的字符是多少个，是包括每行的空格加上字符&lt;/li>
&lt;li>每行都是对称的，要找到每行对称中心的字符&lt;/li>
&lt;li>每行的空格数、字符数和对称中心的字符都是不一样的，这个要内循环中处理好&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">middle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input a char (A - Z):&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">middle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">middle&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">middle&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">middle&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 总的行数
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定义变量保存内循环里的空格数以及自字符。字符数实际上是等差数列 - 1，3，5，7...
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">lines&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">spaces&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lines&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 计算每行的空格数
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 计算每行的字符数
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">asc_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每行升序部分的起始字符
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">middle_of_line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">middle&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每行的对称中心的字符
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">desc_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">middle_of_line&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每行的降序部分起始字符
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">spaces&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 打印空格
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">asc_start&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">middle_of_line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">asc_start&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 打印升序部分
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">desc_start&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 打印降序部分
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Your input is invalid!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">42&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">44&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">46&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="c1">// 结果输出
&lt;/span>&lt;span class="ln">48&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Please&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">G&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="n">A&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="n">ABA&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="n">ABCBA&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="n">ABCDCBA&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="n">ABCDEDCBA&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="n">ABCDEFEDCBA&lt;/span>
&lt;span class="ln">55&lt;/span>&lt;span class="n">ABCDEFGFEDCBA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="7">
&lt;li>编写一个程序把一个单词读入一个字符数组中，然后倒序打印这个单词。提示：&lt;code>strlen()&lt;/code>函数。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：&lt;/p>
&lt;ul>
&lt;li>&lt;code>strlen()&lt;/code>和&lt;code>sizeof&lt;/code>的区别是 - &lt;code>strlen&lt;/code>输出的字符串的长度，即一个字符串里字符的个数（不包括）末尾的占位符；&lt;code>sizeof&lt;/code>输出的是字符数组的长度&lt;/li>
&lt;li>&lt;code>scanf&lt;/code>读入字符串的时候，遇到空格就停止读入了，也就是读入的只是空格前字符&lt;/li>
&lt;li>实际上，字符串是通过字符数组存放。如果输入的字符串长度超过的数组长度，那么也不会报错且存放的数据也都是正确的，本章和前面的章节还没给出答案，后面专门的字符串章节应该会介绍&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;string.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input a word: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sizeof: %zd, string length: %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Magic - &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c1">// 结果输出
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Please&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="nl">word&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">congratulation&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="nl">length&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">Magic&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">noitalutargnoc&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="11">
&lt;li>编写一个程序，在数组中读入8个整数，然后按照倒序打印这个8个整数&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：这个考察的是通过循环从&lt;code>scanf&lt;/code>输入字符元素，输入的时候&lt;code>scanf&lt;/code>通过空格分隔。实际上&lt;code>scanf&lt;/code>遇到与期望的数据类型不一致的时候就停止输入，然后继续把不合格的类型的数据传递给下一次&lt;code>scanf&lt;/code>，这个要注意&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#define SIZE 8
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter 8 numbers(int): &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Numbers in reverse: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SIZE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1">// 结果输出
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Enter&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="n">Numbers&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="nl">reverse&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">%&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch07-c控制语句分支和跳转">ch07. C控制语句：分支和跳转&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>编写一个程序读取输入，读到#字符停止，然后报告读取的空格数、换行符数和所有其他字符的数量&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：&lt;/p>
&lt;ul>
&lt;li>可以使用&lt;code>getchar&lt;/code>或者&lt;code>scanf&lt;/code>来获取输入的字符&lt;/li>
&lt;li>可以使用&lt;code>switch...case...&lt;/code>或者&lt;code>if...else...&lt;/code>来判断字符&lt;/li>
&lt;li>&lt;code>ctype.h&lt;/code>中提供了一系列判断字符类型的函数，要加以利用。但是在&lt;code>switch...case..&lt;/code> 的&lt;code>case&lt;/code>语句中，不能使用函数判断字符类型，因为&lt;code>case&lt;/code>分支值必须是整型常量后者常量表达式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input # to end...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">returns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">returns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">others&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">ch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">spaces&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">returns&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">others&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;char counts:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">spaces : %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">returns: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">others: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">spaces&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">returns&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="6">
&lt;li>编写程序读取输入，读到#停止，报告ei出现的次数&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：&lt;/p>
&lt;ol>
&lt;li>需要记录上一次和当前的字符，当上次字符是&lt;code>e&lt;/code>且当前字符是&lt;code>i&lt;/code>的时候，计数器加1&lt;/li>
&lt;li>需要使用逻辑与运算&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">repeat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Input # to end...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">previous&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;e&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">repeat&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ei counts: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">repeat&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="7">
&lt;li>
&lt;p>编写一个程序，提示用户输入一周工作的小时数，然后打印工资总额、税金和净收入。做如下假设：&lt;/p>
&lt;p>a. 基本工资 = 10.00美元/小时&lt;/p>
&lt;p>b. 加班（超过40小时）= 1.5倍的时间&lt;/p>
&lt;p>c. 税率： 前300美元为15%&lt;/p>
&lt;p>​ 续150美元为20%&lt;/p>
&lt;p>​ 余下的为25%&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#define BASIC_SALARY 10.00
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">#define RATE_300 0.15
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cp">#define RATE_450 0.2
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="cp">#define RATE_OVER_450 0.25
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">working_hours&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input your working hours: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">working_hours&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bad input, please try again!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getchar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 过滤掉不符合要求的字符，否则不符合规则字符会一直传递给scanf导致死循环
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input your working hours: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">working_hours&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">working_hours&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">40&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">1.5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">working_hours&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">total_salary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">working_hours&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">BASIC_SALARY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">tax&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">450&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">tax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">300&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_300&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">150&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_450&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">450&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_OVER_450&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">tax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">300&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_300&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">total_salary&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_OVER_450&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">tax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">total_salary&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">RATE_300&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Total Salary: %4.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">Tax: %4.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">Net Salary: %4.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">total_salary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">total_salary&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">tax&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch08-字符输入输出和输入验证">ch08. 字符输入/输出和输入验证&lt;/h2>
&lt;blockquote>
&lt;ol start="4">
&lt;li>编写一个程序，在遇到EOF之前，把输入作为字符流读取。该程序要报告每个单词的字母数，不要把空白和标点统计为单词的字母&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ctype.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">ch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ispunct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\t&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">putchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">chCount&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">chCount&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chCount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">chCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch09-函数">ch09. 函数&lt;/h2>
&lt;blockquote>
&lt;ol start="7">
&lt;li>编写一个函数，从标准输入中读取字符，直到遇到文件结尾。程序要报告每个字符是否是字母。如果是，还要报告该字母在字母表中的数值位置。例如，c和C在字母表中的位置都是3。合并一个函数，以一个字符作为参数，如果该字符是一个字母则返回一个数值位置，否则返回-1。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：善用&lt;code>ctype.h&lt;/code>提供的函数能很好的处理空格和大小写字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ctype.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">alphabetPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">alphabetPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c is not in the alphabet.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The position of %c in the alphabet is: %d.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">alphabetPos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">islower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isupper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="11">
&lt;li>编写并测试Fibonacci()函数，该函数用循环代替递归计算斐波那锲数。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fibonacci_loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Fibonacci(%u): %lu. recursion == loop? %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fibonacci_recursion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">fibonacci_loop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">before_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">before_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">before_1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">before_2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">before_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">before_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="n">before_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch10-数组和指针">ch10. 数组和指针&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>下面的代码中，&lt;code>*ptr&lt;/code>和&lt;code>*(ptr+2)&lt;/code>的值分别是什么？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">torf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>解答：&lt;code>ptr&lt;/code>指向的&lt;code>torf[0]&lt;/code>，也就是一维数组，指向的数据类型的大小是一个&lt;code>int&lt;/code>类型大小为4个字节的整数。初始化&lt;code>ptr&lt;/code>的时候，指向二维数组的第一个元素也就是12，因此解引用后ptr = 12；接着&lt;code>ptr+2&lt;/code>使得指针往前移动两个数据单位，也就是移动了8个字节，由于数组地址的连续性，然后这时候指针正好指向了16。&lt;/p>
&lt;blockquote>
&lt;ol start="2">
&lt;li>分别使用数组表示法、指针表示法和指针递增函数、指针表示法和指针起始和结束拷贝数组：
&lt;ul>
&lt;li>&lt;code>copy_arr(target1, source,5)&lt;/code>&lt;/li>
&lt;li>&lt;code>copy_ptr(target1, source,5)&lt;/code>&lt;/li>
&lt;li>&lt;code>copy_ptrs(target, source, source+5)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;stdio.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_ptrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">srcstart&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">srcend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">srcstart&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">srcend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">srcstart&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%.2lf &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">46&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="n">copy_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="n">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="n">copy_ptrs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">50&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">54&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">56&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="6">
&lt;li>编写一个函数，把double类型的数组的数据倒序排序&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">reverse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="7">
&lt;li>编写一个程序，初始化一个double类型的二维数组，使用2中的拷贝程序把该二维数组拷贝到另一个二维数组里&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_arr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">printarr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">6.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">7.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">8.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">9.9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">10.0&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">11.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">12.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">13.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">14.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">15.5&lt;/span> &lt;span class="p">}};&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">copy_arr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">printarr2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ol start="9">
&lt;li>编写一个程序初始化一个double类型的3X5的二维数组，使用一个处理变长数组的函数将其拷贝至另一个二维数组中。还需要编写一个接受一个以变长数组为形参的函数打印这个二维数组&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>思考：这个跟第7题类似，只不过将第7题中的函数修改成以变长数组作为形参。这里需要知道如何定义形参为变长数组的函数即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">cols&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">cols&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">copy_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">arr2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rows&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">cols&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">rows&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">printarr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">cols&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.5&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">6.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">7.7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">8.8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">9.9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">10.0&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">11.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">12.2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">13.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">14.4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">15.5&lt;/span> &lt;span class="p">}};&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">copy_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">source2d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">print_mn2darr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target2d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>C Primer Plus读书笔记（二）</title><link>https://www.jonathanlin.top/posts/c-primer-plus-notes-02/</link><pubDate>Mon, 19 Jul 2021 21:24:20 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-notes-02/</guid><description>
&lt;p>&lt;em>本文是《C Primer Plus》第六章至第八章读书笔记，持续更新中。&lt;/em>&lt;/p>
&lt;h2 id="ch06-c控制语句循环">ch06. C控制语句：循环&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>C语言支持哪些循环控制关键字&lt;/li>
&lt;li>循环体中（里）变量的作用域&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>可以通过&lt;code>scanf&lt;/code>函数控制循环 - 如果输入数据无法转换成指定类型的时候，&lt;code>scanf&lt;/code>函数返回0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>while&lt;/code>循环部分要点：&lt;strong>只有测试条件之后的单独语句（简单或者符合语句）才是循环部分&lt;/strong> （一般编程习惯好的都不会出现这种情况，但是也得了解如果出现这种情况到底是因为什么。现代高级的IDE都会有相应的提醒）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;n is %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 这里的n++已经不是循环体的一部分了，这个程序会陷入死循环
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 这里的分号是一个完整的语句了，一个空语句，只有这个空语句是while的循环体，因此这个程序只会打印 - n is 4
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;n is %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>关系表达式 - 浮点数比较时尽量只使用&lt;code>&amp;gt;&lt;/code>和&lt;code>&amp;lt;&lt;/code>，因为浮点数的舍入误差会导致逻辑上应该相等的两个数不相等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>TIP - 在构建是否相等的关系表示式的时候，可以如果是比价是否和一个常量相等，这时候可以把常量放左边，这可以避免误把赋值操作当做了比较操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">canoes&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 语法错误，编译器不允许这么做
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">canose&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>C语言中，数值可以作为测试表达式（真值），但是C语言的真值的逻辑是：&lt;strong>所有非0都视为真，只有0被视为假&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is true. | &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is false.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is true. | &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%2d is false.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">// Output:
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">// 3 is true. | 2 is true. | 1 is true. | 0 is false.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">// -3 is true. | -2 is true. | -1 is true. | 0 is false.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>C99之前，用&lt;code>int&lt;/code>表示真/假值。C99之后引入了&lt;code>_Bool&lt;/code>类型，该类型只能存储1（真）或0（假）。如果把非0的数值赋值给&lt;code>_Bool&lt;/code>类型变量，改变量自动被设置成1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**关系运算符优先级：**关系运算符的优先级比算术运算符（包括+和-）&lt;strong>低&lt;/strong>，&lt;strong>比赋值运算符高&lt;/strong> (优先级：&lt;a href="https://www.jonathanlin.top/posts/c-primer-plus-notes-01/#ch05%E8%BF%90%E7%AE%97%E7%AC%A6%E8%A1%A8%E8%BE%BE%E7%AC%A6%E5%92%8C%E8%AF%AD%E5%8F%A5">C Primer Plus读书笔记（一） | Standing on the Shoulder of Giants (jonathanlin.top)&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch07-c控制语句分支和跳转">ch07. C控制语句：分支和跳转&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>支持分支、跳转的关键字有哪些&lt;/li>
&lt;li>字符I/O函数&lt;code>getchar&lt;/code>和&lt;code>putchar&lt;/code>有什么特别之处&lt;/li>
&lt;li>&lt;code>goto&lt;/code>语句是否应该使用，应该注意哪些事项&lt;/li>
&lt;li>&lt;code>if...else&lt;/code>的配对问题&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ch = getchar()&lt;/code> - 与&lt;code>scanf(&amp;quot;%c&amp;quot;, &amp;amp;ch)&lt;/code>类似，读取下一个字符赋值给变量&lt;code>ch&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>getchar&lt;/code> - 读取每个字符，包括空格、制表符和换行符&lt;/li>
&lt;li>&lt;code>scanf&lt;/code> - 读取数字时会跳过空格、制表符和换行符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>putchar(ch)&lt;/code> - 与&lt;code>printf(&amp;quot;%c&amp;quot;, ch)&lt;/code>类似，打印一个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctype.h&lt;/code>系列字符函数 - 接受一个字符作为输入，如果该字符属于某个特殊的类型，则返回一个非零值（&lt;code>True&lt;/code>），否则返回零值（&lt;code>False&lt;/code>)。这些函数可以判断是否为字母、数字、空白字符等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>C编译器是忽略缩进的&lt;/strong>&lt;/em>，当出现多个&lt;code>if...else&lt;/code>的时候，一定要注意它们之间的配对。配对的原则是：&lt;em>&lt;strong>如果没有花括号，&lt;code>else&lt;/code>和离它最近的&lt;code>if&lt;/code>配对&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>逻辑表达式（有逻辑运算符&lt;code>&amp;amp;&amp;amp; || !&lt;/code>参与的表达式）的求值顺序是从左往右，&lt;em>一旦发现有使整个表达式为假的因素&lt;/em>，立即停止求值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>范围测试，例如判断&lt;code>score&lt;/code>是否在90和100之间&lt;/p>
&lt;ul>
&lt;li>&lt;code>score &amp;gt;= 90 &amp;amp;&amp;amp; score&amp;lt;=100&lt;/code> ✔️&lt;/li>
&lt;li>&lt;code>90 &amp;lt;= score &amp;lt;= 100&lt;/code> ❌ 由于&lt;code>&amp;lt;=&lt;/code>的求值顺序是从左到右，因此这里会先计算&lt;code>90 &amp;lt;= score&lt;/code>，而整个关系表达值的值要么是0（False）要么是1（True），都是小于100，因此整个表达式的结果是&lt;code>True&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>条件运算符&lt;code>?:&lt;/code> - &lt;code>expression1 ? expression2: expression3&lt;/code>&lt;/p>
&lt;ul>
&lt;li>如果&lt;code>expression1&lt;/code>的值为&lt;code>True&lt;/code>，那么整个表达式的值为&lt;code>expression2&lt;/code>&lt;/li>
&lt;li>如果&lt;code>expression1&lt;/code>的值为&lt;code>False&lt;/code>，那么整个表达式的值为&lt;code>expression3&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>switch...case...&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>switch&lt;/code>括号表达式中的值应该是一个整数值（包括&lt;code>char&lt;/code>）&lt;/li>
&lt;li>&lt;code>case&lt;/code>标签必须是整数类型（包括&lt;code>char&lt;/code>)的常量或者整数型常量表达式&lt;/li>
&lt;li>不能用变量作为&lt;code>case&lt;/code>标签&lt;/li>
&lt;li>如果没有添加&lt;code>break&lt;/code>，那么匹配到某个标签以及之后所有的&lt;code>case&lt;/code>都会匹配上&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">整型表达式&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="err">常量&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="err">语句&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="err">常量&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="err">语句&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="err">语句&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>尽量避免或者不使用&lt;code>goto&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="k">goto&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">...&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nl">label&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">statement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ch08-字符输入输出和输入验证">ch08. 字符输入/输出和输入验证&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>输入和输出跟缓冲区有什么关系？&lt;/li>
&lt;li>有缓冲和无缓冲有什么区别？&lt;/li>
&lt;li>是否可以手动刷新输入输出缓冲区？&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>无缓冲区：当用户输入字符后立即重复打印该字符，这是无缓冲区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有缓冲区：用户输入的字符被收集保存在一个被称为&lt;code>缓冲区(buffer)&lt;/code>的临时存储区，按下Enter后打印，这是有缓冲区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓冲类型：&lt;/p>
&lt;ul>
&lt;li>完全缓冲I/O：当缓冲区满的时候才刷新缓冲区&lt;/li>
&lt;li>行缓冲I/O：出现换行符时刷新缓冲区&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>文件和流&lt;/p>
&lt;ul>
&lt;li>文件：&lt;strong>存储器中存储信息的区域，不同的操作系统存储信息方式不同，因此文件的底层表示形式也不一样。有的分块有的不分块，有的块大有的块小&lt;/strong>&lt;/li>
&lt;li>流：C程序处理的是流，而不是文件。流或者说数据流是对输入输出的映射，换句话说，输入转换成数据流，数据流映射到文件，输出也是类似，文件映射成数据流。这样上层就忽略了底层因为操作系统不同带来的差异&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>文件结尾EOF&lt;/p>
&lt;ul>
&lt;li>可以用处理文件的方式来处理键盘输入（原因是C语言处理的都是流）&lt;/li>
&lt;li>以往判断文件结尾的一种方式是，&lt;strong>在文件末尾放一个特殊字符ctrl+z标记文件结尾&lt;/strong>&lt;/li>
&lt;li>无论操作系统实际使用何种方法检测文件结尾，C语言中检测到文件末尾的时候，会返回一个&lt;strong>特殊的值EOF&lt;/strong>（&lt;strong>注意，EOF是一个值，并不是一个字符&lt;/strong>）&lt;/li>
&lt;li>EOF的值不在&lt;code>char&lt;/code>的值表示的范围内&lt;/li>
&lt;li>在终端中，UNIX风格的操作系统通过&lt;code>ctrl+d&lt;/code>模拟EOF&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>stdin和stdout&lt;/p>
&lt;ul>
&lt;li>C语言上层处理的是&lt;strong>数据流&lt;/strong>，至于数据流的源头和目的地是哪，实际上对上层语言是透明的&lt;/li>
&lt;li>stdin - 程序从stdin获取到的数据流，数据的来源可能是键盘输入，也可能是来自文件，程序本身不知道源头，只知道处理的是数据流。stdin默认来源是键盘输入，可以通过重定向使得数据来源于文件&lt;/li>
&lt;li>stdout - 程序将数据流发送给stdout，数据流的去处对程序是透明的。数据流经由stdout，可能输出到显示设备，也可能保存到文件。默认是输出到显示设备&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code>和&lt;code>&amp;gt;&lt;/code>是重定向符号&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>C Primer Plus读书笔记（一）</title><link>https://www.jonathanlin.top/posts/c-primer-plus-notes-01/</link><pubDate>Mon, 05 Jul 2021 19:41:09 +0800</pubDate><guid>https://www.jonathanlin.top/posts/c-primer-plus-notes-01/</guid><description>
&lt;p>&lt;em>本文是《C Primer Plus》第三章至第五章读书笔记。&lt;/em>&lt;/p>
&lt;h2 id="ch03-数据和c">ch03. 数据和C&lt;/h2>
&lt;blockquote>
&lt;p>思考问题：&lt;/p>
&lt;ol>
&lt;li>各种类型的数据占用多少空间&lt;/li>
&lt;li>各种类型的数据是如何格式化输出的&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>一般而言，存储int需要占用一个机器字长&lt;/li>
&lt;li>C语言中的byte不是8个bit，而是和一个char占用的位长一样&lt;/li>
&lt;li>char根据编译器不同，可能被处理成有符号也可能被处理成无符号。具体可以查看头文件limits.h&lt;/li>
&lt;li>整数类型一般都被存储为int类型，当超过int最大范围，编译器会自动将其视为高一个等级的类型，直到越界&lt;/li>
&lt;li>2^16 = 65536 / 2^8 = 256&lt;/li>
&lt;li>浮点数的存储：有效数和指数部分（包括符号），3.16e^7，有效数部分就是3.16&lt;/li>
&lt;li>float至少能表示6位有效数字，double至少能表示10位有效数字&lt;/li>
&lt;li>表达式中，float会自动转化成double&lt;/li>
&lt;li>浮点数和整型数在计算机内部，虽然都是二进制表示，但是二进制的表示形式不一样，浮点数是把有效数字和指数部分分别表示。因此，在处理浮点数和整型的时候，计算机会做自动的转换，这个很危险&lt;/li>
&lt;/ul>
&lt;h2 id="ch04-字符串和格式化输入输出">ch04. 字符串和格式化输入/输出&lt;/h2>
&lt;blockquote>
&lt;p>思考问题：&lt;/p>
&lt;ol>
&lt;li>字符串是如何存取的&lt;/li>
&lt;li>字符串底层的数据结构是怎样的&lt;/li>
&lt;li>输入输出函数如何格式化&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>C语言中，没有专门的数据结构存放字符串。字符串是存放在char数组中，且数组的末尾是存放占位符'\0'，这个占位符是自动添加到数组末尾&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用scanf读取字符串的时候，&lt;strong>输入空格则停止读取&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用scanf读取字符串的时候，变量不需要通过&amp;amp;取地址（因为字符数组本身就是一个指针）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;quot;x&amp;quot;和'x'的区别：前者是char数组，实际占用两个字符，后者是char类型，一个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sizeof - 字节长度 / strlen - 字符串长度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用sizeof计算字符串，会把结束字符（空字符'\0'）也算进去得到总共占用的字节数；而strlen计算字符串长度的时候，不会把末尾的结束字符计算进去&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sizeof结果返回size_t类型，一个无符号整型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>limits.h和float.h中分别定义了各种类型的最大值和最小值，这个会由于操作系统以及其字长的不同而不同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>#define NAME value - 使用预处理器定义了一个明示常量，通常用大写来命名；const定义的实际是变量，可读变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>printf&lt;em>&lt;strong>转换说明：把以二进制格式存储在计算机中的值转换成一系列字符串然后打印&lt;/strong>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>转换如果和底层的数据类型不匹配会发生很奇怪的事情，如下代码：&lt;/p>
&lt;ol>
&lt;li>n1是float类型，但是在存储的时候会自动转换成double，因此占用8个字节，但是&lt;code>%ld&lt;/code>导致在转换说明的时候，只读取了前4个字节&lt;/li>
&lt;li>以上，导致每一次&lt;code>%ld&lt;/code>的转换都发生错位，四次的&lt;code>%ld&lt;/code>仅读取了16个字节，但是&lt;code>n1&lt;/code>到&lt;code>n4&lt;/code>一共占用了24个字节&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln">1&lt;/span>&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%ld %ld %ld %ld&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/jonlimx/blogs/image/printf-incompatiable.png" alt="转换不匹配">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>格式化字符串转换说明 （关于转换说明符修饰符P71）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>转换说明&lt;/th>
&lt;th>输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>%a %A&lt;/td>
&lt;td>浮点数、十六进制数和p记数法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%c&lt;/td>
&lt;td>单个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%d&lt;/td>
&lt;td>有符号十进制整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%e %E&lt;/td>
&lt;td>浮点数，e&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%f&lt;/td>
&lt;td>浮点数，十进制记数法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%g %G&lt;/td>
&lt;td>根据值的不同，自动选择%f或%e。%e格式用于指数小于-4或者大于或等于精度时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%i&lt;/td>
&lt;td>有符号十进制整数（与%d相同）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%o&lt;/td>
&lt;td>无符号八进制整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%p&lt;/td>
&lt;td>指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%s&lt;/td>
&lt;td>字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%u&lt;/td>
&lt;td>无符号十进制整数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%x&lt;/td>
&lt;td>无符号十六进制整数，使用十六进制数0f&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%X&lt;/td>
&lt;td>无符号十六进制整数，使用十六进制数0F&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%%&lt;/td>
&lt;td>打印一个百分号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%zd&lt;/td>
&lt;td>打印size_t类型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>scanf与printf正好相反，从键盘输入的都是字符串，scanf通过制定数据类型然后将字符串转换成对应的数据类型。注意：&lt;strong>除了字符串类型及char数组，其他所有的类型都要通过指针来接收值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>scanf通过空格或者回车将输入分割成多个字段（%c是例外，也会把空字符作为输入存储）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>scanf的返回值是成功读取的项数（个数）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>*修饰符&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于printf而言，*修饰符用于代替字段。如下面代码所示，*修饰符用与替换width和precision表示宽度和精度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于scanf而言，把*放在%和转换字符之间，则会跳过相应的输入项。下面代码所示，scanf跳过了第一个和第二个输入，把第三个输入赋值给n&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="ln"> 1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">242.5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*.*f&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">precision&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%*d %*d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ch05-运算符表达符和语句">ch05. 运算符、表达符和语句&lt;/h2>
&lt;blockquote>
&lt;p>思考问题：&lt;/p>
&lt;ol>
&lt;li>C语言中有哪些运算符和表达符，运算符的优先级是怎么样的&lt;/li>
&lt;li>C语言中有哪些特殊的语句&lt;/li>
&lt;li>自动类型转换和强制类型转换&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>赋值表达式的目的是把值存储到内存位置上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浮点数除法的结果是浮点数，整数除法的结果是整数（小数部分直接被截断，不会四舍五入 ），整数和浮点数的除法是浮点数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运算符优先级&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>结合律 - 运算符符合与运算对象结合&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>（）&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ - （一元）++ -- sizeof ！&lt;/td>
&lt;td>从右到左&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>* / %&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ - （二元）&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>== !=&lt;/td>
&lt;td>从左到右&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>=&lt;/td>
&lt;td>从右到左&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上表结合律只适用于共享同一运算对象的运算符&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>6*3 + 4*5 - 可以肯定*优先级比+高，但是这例子中，6*3和4*5的运算先后顺序不确定，不同硬件平台可能顺序不一样（&lt;em>发生指令重排？？&lt;/em>）&lt;/li>
&lt;li>12/3*2 - 这个例子中，/和*的优先级一样，但是3是共享运算对象，因此遵循结合律从左到右，所以先算12/3，然后4*2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>求模运算只能用于整数，不能用于浮点数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>a%b &amp;lt;=&amp;gt; a - (a/b)*b&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自增和自减运算符 ++/--&lt;/p>
&lt;ul>
&lt;li>前缀模式：&lt;strong>先完成自增或者自减&lt;/strong>，然后再用结果参与同一语句中的其他运算&lt;/li>
&lt;li>后缀模式：先完成同一语句的其他预算，&lt;strong>然后再完成自增或者自减&lt;/strong>&lt;/li>
&lt;li>如果只是单独使用，也就是不和其他运算对象以及运算符一起的时候，前缀和后缀模式都没有区别，就是要完成自增或者自减&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>下面两种情况不要使用自增后者自减（由于可能指令重排导致计算没有按预期的顺序进行）&lt;/p>
&lt;ul>
&lt;li>一个变量出现在一个函数的多个参数中，那么不要对该变量使用自增或者自减&lt;/li>
&lt;li>一个变量多次出现表达式中，那么不要对该变量使用自增或者自减 - ans = num/2 + 5*(1+num++)，&lt;em>这里可能因为指令重排导致num++先算，那么前面的num/2就和预期不一样了&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>序列点：程序执行的点，在一个语句中，赋值运算符、自增自减运算符对运算对象做的改变必须在程序执行下一条语句之前完成&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动类型转换（&lt;strong>通常应该要避免&lt;/strong>）：&lt;/p>
&lt;ul>
&lt;li>升级：较小类型转换成较大类型&lt;/li>
&lt;li>降级：较大类型转换成较小类型 - &lt;strong>这种情况可能会发生数据截断&lt;/strong>&lt;/li>
&lt;li>升级发生在表达式中运算对象数据类型不同，这时候发生自动自动类型转换。运算结束后，会根据目标类型可能会发生降级，这时候可能就会发生数据截断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>强制类型转换：(type)variable&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实参和形参&lt;/p>
&lt;ul>
&lt;li>实参 argument - 调用函数时传递给形参的实际的值&lt;/li>
&lt;li>形参 parameter - 函数签名上定义的变量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>引用书中关于自动类型转换的一段：&lt;/p>
&lt;p>在C语言中，许多类型转换都是自动进行的。当&lt;code>char&lt;/code>和&lt;code>short&lt;/code>类型出现在表达式里或者作为函数的参数（函数原型除外）时，都会被升级为&lt;code>int&lt;/code>类型；当&lt;code>float&lt;/code>类型在函数参数中时，会被升级为&lt;code>double&lt;/code>类型&lt;/p>
&lt;p>当把一种值赋给另一种类型的变量时，值将被转换成与变量的类型相同&lt;/p>
&lt;p>当把较大类型转换成较小类型时，可能会丢失数据&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>函数声明 - 在调用函数的时候，编译器首先需要知道函数的返回类型，所以需要先声明函数，至于函数的实现可以放在后面&lt;/li>
&lt;/ul></description></item></channel></rss>